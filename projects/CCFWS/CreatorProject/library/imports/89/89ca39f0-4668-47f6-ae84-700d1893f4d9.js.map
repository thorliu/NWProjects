{"version":3,"sources":["../../../../../../../assets/resources/scripts/fws/data/assets/resources/scripts/fws/data/FWSData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../../assets/resources/scripts/fws/data","sourcesContent":["/*\n * 数据相关的基础功能, 包括支持克隆, 迭代的基本数据结构, 支持数据绑定通知的基本数据模型\n * @Author: 刘强\n * @Date: 2017-03-01 14:19:44 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 15:39:59\n */\n\nmodule FWSData\n{\n\t//----------------------------------------------- 辅助功能\n\n\t/**\n\t * 以路径的方式获取指定成员的值 \n\t * @export\n\t * @param {*} source 对象\n\t * @param {string} path 用点语法分隔key或者索引的字符串表示一个路径, 例如: \"myUser.cards.0\", 相当于source.myUser.cards[0]\n\t * @param {*} [defaultValue] 当路径访问数据内容失败时, 返回的一个默认值\n\t * @returns {*} \n\t */\n\texport function getValueFromPath(source: any, path: string, defaultValue?: any): any\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn eval(\"source\" + path);\n\t\t}\n\t\tcatch (err) { }\n\t\treturn defaultValue;\n\t}\n\n\t/**\n\t * 用成员名称的方式获取指定成员的值\n\t * @export\n\t * @param {*} source 对象\n\t * @param {string} member 成员名称, 例如: \"myUser\", 相当于source.myUser\n\t * @param {*} [defaultValue] 当访问数据内容失败时, 返回的一个默认值\n\t * @returns {*} \n\t */\n\texport function getValueFromMember(source: any, member: string, defaultValue?: any): any\n\t{\n\t\tif (!source) return defaultValue;\n\n\t\tvar ret: any = source[member];\n\t\tif (ret === undefined) ret = defaultValue;\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * 设置目标对象指定路径的成员的值为源对象指定路径的值\n\t * @export\n\t * @param {*} source 数据源对象\n\t * @param {string} sourcePath 数据源成员路径\n\t * @param {*} target 目标对象\n\t * @param {string} targetPath 目标对象成员路径\n\t */\n\texport function setValueFromPath(source: any, sourcePath: string, target: any, targetPath: string): void\n\t{\n\t\tif (!source || !target) return;\n\t\tvar targetPathItems: string[] = targetPath.split(\".\");\n\n\t\tvar temp: any = target;\n\t\tfor (var i: number = 0; i < targetPathItems.length - 1; i++)\n\t\t{\n\t\t\tlet targetPathItem: string = targetPathItems[i];\n\t\t\tlet item: any = temp[targetPathItem];\n\t\t\tif (item === null || item === undefined) return;\n\t\t\ttemp = item;\n\t\t}\n\n\t\tvar lastName: string = targetPathItems[targetPathItems.length - 1];\n\t\tvar sourceValue: any = getValueFromPath(source, sourcePath, null);\n\n\t\tif (sourceValue !== null && sourceValue !== undefined)\n\t\t{\n\t\t\ttemp[lastName] = sourceValue;\n\t\t}\n\t}\n\n\t//----------------------------------------------- 事件通知\n\n\t/**\n\t * 事件参数\n\t * @export\n\t * @class EventArgs\n\t */\n\texport class EventArgs\n\t{\n\t\tprivate _sender: any;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {*} sender 事件发送者\n\t\t * @memberOf EventArgs\n\t\t */\n\t\tconstructor(sender: any)\n\t\t{\n\t\t\tthis._sender = sender;\n\t\t}\n\n\t\t/**\n\t\t * 获取事件发送者\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf EventArgs\n\t\t */\n\t\tpublic get sender(): any\n\t\t{\n\t\t\treturn this._sender;\n\t\t}\n\t}\n\n\t/**\n\t * 数据属性改变事件参数\n\t * @export\n\t * @class DataPropertyChangeEventArgs\n\t * @extends {EventArgs}\n\t */\n\texport class DataPropertyChangeEventArgs extends EventArgs\n\t{\n\t\tprivate _propertyName: string;\n\t\tprivate _source: any;\n\t\tprivate _newValue: any;\n\t\tprivate _oldValue: any;\n\n\t\t/**\n\t\t * Creates an instance of DataPropertyChangeEventArgs.\n\t\t * @param {*} sender \n\t\t * @param {*} source \n\t\t * @param {string} propertyName \n\t\t * @param {*} newValue \n\t\t * @param {*} oldValue \n\t\t * \n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tconstructor(sender: any, source: any, propertyName: string, newValue: any, oldValue: any)\n\t\t{\n\t\t\tsuper(sender);\n\t\t\tthis._source = source;\n\t\t\tthis._propertyName = propertyName;\n\t\t\tthis._newValue = newValue;\n\t\t\tthis._oldValue = oldValue;\n\t\t}\n\n\t\t/**\n\t\t * 获取数据源对象\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get source(): any { return this._source; }\n\n\t\t/**\n\t\t * 获取属性名称\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get propertyName(): string { return this._propertyName; }\n\n\t\t/**\n\t\t * 获取属性的新值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get newValue(): any { return this._newValue; }\n\n\t\t/**\n\t\t * 获取属性的老值\n\t\t * \n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get oldValue(): any { return this._oldValue; }\n\t}\n\n\t/**\n\t * 数据字典改变事件类型\n\t * @export\n\t * @enum {number}\n\t */\n\texport enum DataCollectionChangeType\n\t{\n\t\t/**\n\t\t * 清空成员时\n\t\t */\n\t\tClear,\n\t\t/**\n\t\t * 添加成员时\n\t\t */\n\t\tAdd,\n\t\t/**\n\t\t * 移除成员时\n\t\t */\n\t\tRemove,\n\t\t/**\n\t\t * 修改成员时\n\t\t */\n\t\tModify\n\t}\n\n\t/**\n\t * 数据字典改变事件参数\n\t * @export\n\t * @class DataDictChangeEventArgs\n\t * @extends {EventArgs}\n\t */\n\texport class DataDictChangeEventArgs extends EventArgs\n\t{\n\t\tprivate _source: any;\n\t\tprivate _key: string;\n\t\tprivate _oldValue: any;\n\t\tprivate _newValue: any;\n\t\tprivate _type: DataCollectionChangeType;\n\n\t\tconstructor(sender: any, type: DataCollectionChangeType, source: any, key: string, oldValue: any, newValue: any)\n\t\t{\n\t\t\tsuper(sender);\n\n\t\t\tthis._source = source;\n\t\t\tthis._key = key;\n\t\t\tthis._oldValue = oldValue;\n\t\t\tthis._newValue = newValue;\n\t\t\tthis._type = type;\n\t\t}\n\n\t\t/**\n\t\t * 改变方式\n\t\t * @readonly\n\t\t * @type {DataCollectionChangeType}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get type(): DataCollectionChangeType { return this._type; }\n\n\t\t/**\n\t\t * 数据源对象\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get source(): any { return this._source; }\n\n\t\t/**\n\t\t * 老值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get oldValue(): any { return this._oldValue; }\n\n\t\t/**\n\t\t * 新值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get newValue(): any { return this._newValue; }\n\n\t\t/**\n\t\t * 键名\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get key(): string { return this._key; }\n\t}\n\n\t/**\n\t * 数据列表改变事件参数\n\t * @export\n\t * @class DataListChangeEventArgs\n\t * @extends {EventArgs}\n\t */\n\texport class DataListChangeEventArgs extends EventArgs\n\t{\n\t\tprivate _source: any;\n\t\tprivate _index: number;\n\t\tprivate _oldValue: any;\n\t\tprivate _newValue: any;\n\t\tprivate _type: DataCollectionChangeType;\n\n\t\t/**\n\t\t * Creates an instance of DataListChangeEventArgs.\n\t\t * @param {*} sender \n\t\t * @param {DataCollectionChangeType} type \n\t\t * @param {*} source \n\t\t * @param {number} index \n\t\t * @param {*} newValue \n\t\t * @param {*} oldValue \n\t\t * \n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tconstructor(sender: any, type: DataCollectionChangeType, source: any, index: number, newValue: any, oldValue: any)\n\t\t{\n\t\t\tsuper(sender);\n\n\t\t\tthis._type = type;\n\t\t\tthis._source = source;\n\t\t\tthis._index = index;\n\t\t\tthis._newValue = newValue;\n\t\t\tthis._oldValue = oldValue;\n\t\t}\n\n\t\t/**\n\t\t * 数据改变方式\n\t\t * @readonly\n\t\t * @type {DataCollectionChangeType}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get type(): DataCollectionChangeType { return this._type; }\n\n\t\t/**\n\t\t * 数据源对象\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get source(): any { return this._source; }\n\n\t\t/**\n\t\t * 索引\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get index(): number { return this._index; }\n\n\t\t/**\n\t\t * 新值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get newValue(): any { return this._newValue; }\n\n\t\t/**\n\t\t * 老值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get oldValue(): any { return this._oldValue; }\n\t}\n\n\t//----------------------------------------------- 数据绑定信息\n\n\t/**\n\t * 数据绑定模式\n\t * @export\n\t * @enum {number}\n\t */\n\texport enum DataBindMode\n\t{\n\t\t/**\n\t\t * 一次性同步\n\t\t */\n\t\tOnce,\n\t\t/**\n\t\t * 单向更新绑定\n\t\t */\n\t\tOneWay,\n\t\t/**\n\t\t * 双向更新绑定\n\t\t */\n\t\tTwoWay\n\t}\n\n\t/**\n\t * 数据绑定关系\n\t * \n\t * @export\n\t * @class DataBindLink\n\t */\n\texport class DataBindLink\n\t{\n\t\tprivate _source: any;\n\t\tprivate _target: any;\n\t\tprivate _mode: DataBindMode;\n\t\tprivate _options: any;\n\t\tprivate _type: string;\n\n\t\tconstructor(type: string, source: any, target: any, mode: DataBindMode, options?: any)\n\t\t{\n\t\t\tthis._type = type;\n\t\t\tthis._source = source;\n\t\t\tthis._target = target;\n\t\t\tthis._mode = mode;\n\t\t\tthis._options = options;\n\t\t}\n\n\t\tpublic get type(): string { return this._type; }\n\t\tpublic get source(): any { return this._source; }\n\t\tpublic get target(): any { return this._target; }\n\t\tpublic get mode(): any { return this._mode; }\n\t\tpublic get options(): any { return this._options; }\n\t}\n\n\t/**\n\t * 数据绑定接口\n\t * @export\n\t * @interface IDataContext\n\t */\n\texport interface IDataContext\n\t{\n\t\t/**\n\t\t * 数据源对象\n\t\t * @type {*}\n\t\t * @memberOf IDataContext\n\t\t */\n\t\tdataContext: any;\n\t\t/**\n\t\t * 数据源与当前对象的属性对应关系\n\t\t * @type {*}\n\t\t * @memberOf IDataContext\n\t\t */\n\t\tdataContextMap: any;\n\t\t/**\n\t\t * 数据绑定模式\n\t\t * @type {DataBindMode}\n\t\t * @memberOf IDataContext\n\t\t */\n\t\tdataContextBindMode: DataBindMode;\n\t}\n\n\t//----------------------------------------------- 数据绑定管理器\n\n\t/**\n\t * 数据绑定管理器\n\t * @class DataBindManager\n\t */\n\tclass DataBindManager\n\t{\n\t\tstatic _isntance: DataBindManager;\n\n\t\tprivate _links: Array<DataBindLink>;\n\n\t\t/**\n\t\t * Creates an instance of DataBindManager.\n\t\t * \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._links = new Array<DataBindLink>();\n\t\t}\n\n\t\t/**\n\t\t * 通知数据改变事件\n\t\t * @param {EventArgs} e \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic distEvent(e: EventArgs): void\n\t\t{\n\t\t\tvar cloneList: Array<DataBindLink> = this._links.slice(0);\n\n\t\t\tfor (var i: number = 0; i < cloneList.length; i++)\n\t\t\t{\n\t\t\t\tvar lk: DataBindLink = cloneList[i];\n\t\t\t\tvar handler: Function = this[\"on\" + lk.type + \"Change\"];\n\t\t\t\tif (!handler) continue;\n\n\t\t\t\tif (e.sender === lk.source)\n\t\t\t\t{\n\t\t\t\t\tif (lk.mode === DataBindMode.TwoWay\n\t\t\t\t\t\t|| lk.mode === DataBindMode.OneWay)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.call(this, e, lk, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (e.sender === lk.target && lk.mode === DataBindMode.TwoWay)\n\t\t\t\t{\n\t\t\t\t\thandler.call(this, e, lk, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 添加绑定关系\n\t\t * @param {string} type\n\t\t * @param {*} source \n\t\t * @param {*} target \n\t\t * @param {DataBindMode} mode \n\t\t * @param {*} options \n\t\t * @returns {void} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic add(type: string, source: any, target: any, mode: DataBindMode, options: any): void\n\t\t{\n\t\t\tvar link: DataBindLink = this.find(source, target);\n\t\t\tif (link) return;\n\n\t\t\tlink = new DataBindLink(type, source, target, mode, options);\n\t\t\tthis._links.push(link);\n\t\t}\n\n\t\t/**\n\t\t * 查找绑定关系\n\t\t * @param {*} source \n\t\t * @param {*} target \n\t\t * @returns {DataBindLink} \n\t\t * \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic find(source: any, target: any): DataBindLink\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\n\t\t\t\tif (link.source === source && link.target === target) return link;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 查找数据源\n\t\t * @param {*} source \n\t\t * @returns {DataBindLink} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic findSource(source: any): DataBindLink\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source === source) return link;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 查找目标\n\t\t * @param {*} target \n\t\t * @returns {DataBindLink} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic findTarget(target: any): DataBindLink\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.target === target) return link;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取绑定特定目标的数据源\n\t\t * @param {*} target \n\t\t * @returns {Array<DataBindLink>} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic getBindSources(target: any): Array<DataBindLink>\n\t\t{\n\t\t\tvar ret: Array<DataBindLink> = new Array<DataBindLink>();\n\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.target === target)\n\t\t\t\t{\n\t\t\t\t\tret.push(link);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取绑定特定数据源的目标\n\t\t * @param {*} source \n\t\t * @returns {Array<DataBindLink>} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic getBindTargets(source: any): Array<DataBindLink>\n\t\t{\n\t\t\tvar ret: Array<DataBindLink> = new Array<DataBindLink>();\n\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source === source)\n\t\t\t\t{\n\t\t\t\t\tret.push(link);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 移除特定数据源和目标关系的绑定\n\t\t * @param {*} source \n\t\t * @param {*} target \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeLinksBy(source: any, target: any): void\n\t\t{\n\t\t\tfor (var i: number = this._links.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source !== source || link.target !== target) continue;\n\n\t\t\t\tthis._links.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除所有特定数据源的绑定\n\t\t * @param {*} source \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeLinksBySource(source: any): void\n\t\t{\n\t\t\tfor (var i: number = this._links.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source !== source) continue;\n\t\t\t\tthis._links.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除所有特定目标的绑定\n\t\t * @param {*} target \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeLinksByTarget(target: any): void\n\t\t{\n\t\t\tfor (var i: number = this._links.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.target !== target) continue;\n\t\t\t\tthis._links.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除所有绑定\n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeAll(): void\n\t\t{\n\t\t\tthis._links.splice(0, this._links.length);\n\t\t}\n\n\t\t/**\n\t\t * 对象属性改变\n\t\t * @private\n\t\t * @param {DataPropertyChangeEventArgs} e \n\t\t * @param {DataBindLink} lk\n\t\t * @param {boolean} twoway \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tprivate onPropertiesChange(e: DataPropertyChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tvar src = null;\n\t\t\tvar tag = null;\n\t\t\tvar srcName = \"\";\n\t\t\tvar tagName = \"\";\n\n\t\t\t//options { target: source }\n\t\t\tif (twoway)\n\t\t\t{\n\t\t\t\t//反向\n\t\t\t\tsrc = lk.target;\n\t\t\t\ttag = lk.source;\n\t\t\t\tsrcName = e.propertyName;\n\t\t\t\ttagName = lk.options[srcName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//正向\n\t\t\t\tsrc = lk.source;\n\t\t\t\ttag = lk.target;\n\t\t\t\tsrcName = e.propertyName;\n\t\t\t\tfor (var k in lk.options)\n\t\t\t\t{\n\t\t\t\t\tvar v = lk.options[k];\n\t\t\t\t\tif (v === srcName)\n\t\t\t\t\t{\n\t\t\t\t\t\ttagName = k;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!srcName || !tagName) return;\n\t\t\ttag[tagName] = src[srcName];\n\n\t\t}\n\n\t\t/**\n\t\t * 集合数据回调事件\n\t\t * @private\n\t\t * @param {DataListChangeEventArgs} e \n\t\t * @param {DataBindLink} lk \n\t\t * @param {boolean} twoway \n\t\t * @memberof DataBindManager\n\t\t */\n\t\tprivate onCollectionCallbackChange(e: DataListChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tif (typeof (lk.options) === \"function\")\n\t\t\t{\n\t\t\t\tif (lk.target)\n\t\t\t\t{\n\t\t\t\t\tvar fun: Function = lk.options;\n\t\t\t\t\tfun.call(lk.target, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 列表成员改变\n\t\t * @private\n\t\t * @param {DataListChangeEventArgs} e \n\t\t * @param {DataBindLink} lk\n\t\t * @param {boolean} twoway \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tprivate onListChange(e: DataListChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tif (!lk.source || !lk.target) return;\n\n\t\t\tswitch (e.type)\n\t\t\t{\n\t\t\t\tcase FWSData.DataCollectionChangeType.Clear:\n\t\t\t\t\t{\n\t\t\t\t\t\tif (twoway)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlk.source.clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Add:\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Remove:\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Modify:\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 字典成员改变\n\t\t * @private\n\t\t * @param {DataDictChangeEventArgs} e \n\t\t * @param {DataBindLink} lk\n\t\t * @param {boolean} twoway \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tprivate onDictChange(e: DataDictChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tswitch (e.type)\n\t\t\t{\n\t\t\t\tcase FWSData.DataCollectionChangeType.Clear:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Add:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Remove:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Modify:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 获取数据绑定管理器实例\n\t * @returns {DataBindManager} \n\t */\n\tfunction getDataBindManager(): DataBindManager\n\t{\n\t\tif (!DataBindManager._isntance)\n\t\t{\n\t\t\tDataBindManager._isntance = new DataBindManager();\n\t\t}\n\t\treturn DataBindManager._isntance;\n\t}\n\n\t//----------------------------------------------- 数据拷贝方法\n\n\t/**\n\t * 拷贝属性值\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} [options] \n\t */\n\texport function copyProperties(source: any, target: any, options?: any): void\n\t{\n\t\tif (!options) return;\n\n\t\tif (source === null) return;\n\t\tif (source === undefined) return;\n\t\tif (target === null) return;\n\t\tif (target === undefined) return;\n\n\t\tfor (var k in options)\n\t\t{\n\t\t\tvar v = options[k];\n\n\t\t\t// var v1: any = target[k];\n\t\t\t// var v2: any = source[v];\n\n\t\t\t// console.log(\"(DataBind) copyProperties \" + k + \" = \" + v);\n\n\t\t\t// v1 = (v1 === null || v1 === undefined) ? \"NULL\" : v1;\n\t\t\t// v2 = (v2 === null || v2 === undefined) ? \"NULL\" : v2;\n\t\t\t// console.log(\"(DataBind) 1 # copyProperties(value) target = \" + v1 + \", source = \" + v2);\n\n\t\t\ttarget[k] = source[v];\n\n\t\t\t// v1 = target[k];\n\t\t\t// v2 = source[v];\n\n\t\t\t// v1 = (v1 === null || v1 === undefined) ? \"NULL\" : v1;\n\t\t\t// v2 = (v2 === null || v2 === undefined) ? \"NULL\" : v2;\n\t\t\t// console.log(\"(DataBind) 2 # copyProperties(value) target = \" + v1 + \", source = \" + v2);\n\t\t}\n\t}\n\n\t/**\n\t * 拷贝列表成员\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} [options] \n\t */\n\texport function copyList(source: any, target: any, options?: any): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (source instanceof List) { } else return;\n\t\tif (target instanceof List) { } else return;\n\n\t\ttarget.clear();\n\t\tfor (var i = 0; i < source.length; i++)\n\t\t{\n\t\t\ttarget.add(source.at(i));\n\t\t}\n\t}\n\n\t/**\n\t * 拷贝字典成员\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} [options] \n\t */\n\texport function copyDict(source: any, target: any, options?: any): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (source instanceof Dict) { } else return;\n\t\tif (target instanceof Dict) { } else return;\n\n\t\tvar ks: Array<string> = source.keys;\n\t\tfor (var i: number = 0; i < ks.length; i++)\n\t\t{\n\t\t\tvar k = ks[i];\n\t\t\tvar v = source.getItem(k);\n\t\t\ttarget.setItem(k, v);\n\t\t}\n\t}\n\n\t//----------------------------------------------- 数据绑定方法\n\n\t/**\n\t * 建立数据属性绑定\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {DataBindMode} mode \n\t * @param {*} options \n\t */\n\texport function bindProperties(source: any, target: any, mode: DataBindMode, options?: any): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (mode !== DataBindMode.Once)\n\t\t{\n\t\t\tgetDataBindManager().add(\"Properties\", source, target, mode, options);\n\t\t}\n\t\tcopyProperties(source, target, options);\n\t}\n\n\t/**\n\t * 绑定集合\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} Function \n\t */\n\texport function bindCollectionCallback(source: any, target: any, options: Function): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (typeof (options) !== \"function\") return;\n\t\tgetDataBindManager().add(\"CollectionCallback\", source, target, DataBindMode.OneWay, options);\n\t}\n\n\t/**\n\t * 解除特定数据源和目标的数据绑定\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t */\n\texport function unbind(source: any, target: any): void\n\t{\n\t\tgetDataBindManager().removeLinksBy(source, target);\n\t}\n\n\t/**\n\t * 解除数据源的数据绑定\n\t * @export\n\t * @param {*} source \n\t */\n\texport function unbindBySource(source: any): void\n\t{\n\t\tgetDataBindManager().removeLinksBySource(source);\n\t}\n\n\t/**\n\t * 解除目标对象的数据绑定\n\t * @export\n\t * @param {*} target \n\t */\n\texport function unbindByTarget(target: any): void\n\t{\n\t\tgetDataBindManager().removeLinksByTarget(target);\n\t}\n\n\t//----------------------------------------------- 依赖关系\n\n\t/**\n\t * 依赖属性 (提供属性值绑定的数据源的主要实现方法)\n\t * @export\n\t * @class DependentProperties\n\t */\n\texport class DependentProperties\n\t{\n\n\t\tprivate _owner: any;\n\t\tprivate _properties: Object;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {*} owner \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tconstructor(owner: any)\n\t\t{\n\t\t\tthis._owner = owner;\n\t\t\tthis._properties = new Object();\n\t\t}\n\n\t\t/**\n\t\t * 获取属性值\n\t\t * @param {string} name \n\t\t * @param {*} [defValue] \n\t\t * @returns {*} \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic get(name: string, defValue?: any): any\n\t\t{\n\t\t\tif (this._properties.hasOwnProperty(name))\n\t\t\t{\n\t\t\t\treturn this._properties[name];\n\t\t\t}\n\t\t\treturn defValue;\n\t\t}\n\n\t\t/**\n\t\t * 设置属性值\n\t\t * @param {string} name \n\t\t * @param {*} newValue \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic set(name: string, newValue: any): boolean\n\t\t{\n\t\t\tif (this._properties[name] === newValue) return false;\n\t\t\tvar oldValue: any = this._properties[name];\n\t\t\tthis._properties[name] = newValue;\n\t\t\tgetDataBindManager().distEvent(new DataPropertyChangeEventArgs(this._owner, this._owner, name, newValue, oldValue));\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * 清空内容\n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tfor (var k in this._properties)\n\t\t\t{\n\t\t\t\tdelete this._properties[k];\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 生成json字串\n\t\t */\n\t\tpublic toJSON(): string\n\t\t{\n\t\t\treturn JSON.stringify(this._properties);\n\t\t}\n\n\t\t/**\n\t\t * 从json字串读取内容\n\t\t * @param {string} json \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic fromJSON(json: string): void\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis._properties = JSON.parse(json);\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 依赖对象 (用于数据绑定的数据对象的抽象类)\n\t * @export\n\t * @class DependentObject\n\t */\n\texport class DependentObject\n\t{\n\t\tprivate __DP: DependentProperties;\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf DependentObject\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis.__DP = new DependentProperties(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取属性值\n\t\t * @private\n\t\t * @param {string} name \n\t\t * @param {*} [defValue] \n\t\t * @returns {*} \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic get(name: string, defValue?: any): any\n\t\t{\n\t\t\treturn this.__DP.get(name, defValue);\n\t\t}\n\n\t\t/**\n\t\t * 设置属性值\n\t\t * @param {string} name \n\t\t * @param {*} newValue \n\t\t * \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic set(name: string, newValue: any): boolean\n\t\t{\n\t\t\treturn this.__DP.set(name, newValue);\n\t\t}\n\n\t\t/**\n\t\t * 清空属性值\n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tthis.__DP.clear();\n\t\t}\n\n\t\t/**\n\t\t * 生成json字串\n\t\t * @returns {string} \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic toJSON(): string\n\t\t{\n\t\t\treturn this.__DP.toJSON();\n\t\t}\n\n\t\t/**\n\t\t * 从json字串读取内容\n\t\t * @param {string} json \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic fromJSON(json: string): void\n\t\t{\n\t\t\tthis.__DP.fromJSON(json);\n\t\t}\n\n\t}\n\n\t//----------------------------------------------- 接口标准\n\n\t/**\n\t * 统一的迭代器接口\n\t * @export\n\t * @interface IEnumerator\n\t */\n\texport interface IEnumerator\n\t{\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf IEnumerator\n\t\t */\n\t\treset(): void;\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf IEnumerator\n\t\t */\n\t\tgetCurrent(): any;\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf IEnumerator\n\t\t */\n\t\tmoveNext(): void;\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf IEnumerator\n\t\t */\n\t\tend(): boolean;\n\t}\n\n\t/**\n\t * 克隆接口 (目前基本上只支持浅克隆)\n\t * @export\n\t * @interface ICloneable\n\t */\n\texport interface ICloneable\n\t{\n\t\tclone(deep?: boolean): any;\n\t}\n\n\t/**\n\t * 统一的可迭代的访问接口\n\t * @export\n\t * @interface IEnumerable\n\t */\n\texport interface IEnumerable\n\t{\n\t\t/**\n\t\t * 获取一个迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf IEnumerable\n\t\t */\n\t\tgetEnumerator(): IEnumerator;\n\t}\n\n\t//----------------------------------------------- 数据结构和迭代器\n\n\t/**\n\t * 字典, 也就是通常的KV结构\n\t * @export\n\t * @class Dict\n\t * @template T \n\t */\n\texport class Dict<T> implements IEnumerable, ICloneable\n\t{\n\t\tprivate _dict: any;\n\n\t\t/**\n\t\t * 构造\n\t\t */\n\t\tconstructor(data: Object = null)\n\t\t{\n\t\t\tthis._dict = new Object();\n\n\t\t\tif (data)\n\t\t\t{\n\t\t\t\tfor (var k in data)\n\t\t\t\t{\n\t\t\t\t\tvar v = data[k];\n\t\t\t\t\tthis._dict[k] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Dict\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new DictEnumerator(this);\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * \n\t\t * @memberOf Dict\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Dict<T> = new Dict<T>();\n\n\t\t\tvar ks: Array<string> = this.keys;\n\t\t\tfor (var k in ks)\n\t\t\t{\n\t\t\t\tlet v = this.getItem[k];\n\t\t\t\tret.setItem(k, v);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取指定键的值\n\t\t * @param key 键\n\t\t */\n\t\tpublic getItem(key: string): T\n\t\t{\n\t\t\treturn this._dict[key];\n\t\t}\n\n\t\t/**\n\t\t * 设置指定键的值\n\t\t * @param key 键\n\t\t * @param value 值\n\t\t */\n\t\tpublic setItem(key: string, value: T): void\n\t\t{\n\t\t\tif (this._dict[key] === value) return;\n\n\t\t\tif (this.containKey(key))\n\t\t\t{\n\t\t\t\tvar oldValue: T = this._dict[key];\n\t\t\t\tthis._dict[key] = value;\n\t\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Modify, this, key, oldValue, value));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._dict[key] = value;\n\t\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Add, this, key, oldValue, value));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 删除指定键以及值\n\t\t * @param key 键\n\t\t */\n\t\tpublic deleteKey(key: string): void\n\t\t{\n\t\t\tif (!this.containKey(key)) return;\n\n\t\t\tvar ret = this._dict[key];\n\t\t\tdelete this._dict[key];\n\n\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Remove, this, key, ret, null));\n\t\t}\n\n\t\t/**\n\t\t * 判定是否包含指定的键\n\t\t * @param key 键\n\t\t */\n\t\tpublic containKey(key: string): boolean\n\t\t{\n\t\t\t// console.log(\"[TS]FWSData.Dict.containKey() \", key);\n\t\t\t// var keys: string[] = this.keys;\n\t\t\t// for (var i: number = 0; i < keys.length; i++)\n\t\t\t// {\n\t\t\t// \tconsole.log(\"[TS]FWSData.Dict.containKey.keys() \", i, keys[i]);\n\t\t\t// }\n\t\t\treturn this.keys.indexOf(key) >= 0;\n\t\t}\n\n\t\t/**\n\t\t * 判定是否包含指定的值\n\t\t * @param value 值\n\t\t */\n\t\tpublic containValue(value: T): boolean\n\t\t{\n\t\t\treturn this.values.indexOf(value) >= 0;\n\t\t}\n\n\t\t/**\n\t\t * 清空所有内容\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tif (this.count == 0) return;\n\t\t\tfor (var key in this._dict)\n\t\t\t{\n\t\t\t\tdelete this._dict[key];\n\t\t\t}\n\n\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Clear, this, null, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通对象\n\t\t */\n\t\tpublic toObject(): Object\n\t\t{\n\t\t\tvar ret = new Object();\n\t\t\tfor (var k in this._dict)\n\t\t\t{\n\t\t\t\tvar v = this._dict[k];\n\t\t\t\tret[k] = v;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 转换成字符串信息\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"Dict \" + JSON.stringify(this._dict);\n\t\t}\n\n\t\t/**\n\t\t * 获取所有的键名称\n\t\t */\n\t\tpublic get keys(): Array<string>\n\t\t{\n\t\t\tvar ret: Array<string> = new Array<string>();\n\t\t\tfor (var key in this._dict)\n\t\t\t{\n\t\t\t\tret.push(key);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取所有的值\n\t\t */\n\t\tpublic get values(): Array<T>\n\t\t{\n\t\t\tvar ret: Array<T> = new Array<T>();\n\t\t\tfor (var key in this._dict)\n\t\t\t{\n\t\t\t\tret.push(this._dict[key]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取包含的数据数量\n\t\t */\n\t\tpublic get count(): number\n\t\t{\n\t\t\treturn this.keys.length;\n\t\t}\n\t}\n\n\t/**\n\t * 字典迭代器\n\t * @export\n\t * @class DictEnumerator\n\t * @implements {IEnumerator}\n\t */\n\texport class DictEnumerator implements IEnumerator\n\t{\n\t\tprivate _dict: Dict<any>;\n\t\tprivate _keys: Array<string>;\n\t\tprivate _values: Array<any>;\n\t\tprivate _index: number;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Dict<any>} dict \n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tconstructor(dict: Dict<any>)\n\t\t{\n\t\t\tthis._dict = dict;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._keys = this._dict.keys;\n\t\t\tthis._values = this._dict.values;\n\t\t\tthis._index = 0;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index++;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._values[this._index];\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\tif (this._dict && this._values && this._index >= 0 && this._index < this._values.length)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\n\texport interface IDumpHandler\n\t{\n\t\t(item: any): string\n\t}\n\n\t/**\n\t * 支持数据变动通知的列表数据结构, 建议用它替代Array来处理客户端的常见数组需求, 需要涉及增删改的数据逻辑, 以及界面逻辑或者以后的界面组件\n\t * @export\n\t * @class List\n\t * @template T 成员的类型\n\t */\n\texport class List<T> implements IEnumerable, ICloneable\n\t{\n\t\tprivate _list: Array<T>;\n\t\t/**\n\t\t * 构造\n\t\t */\n\t\tconstructor(ary: T[] = null, cloneAry: boolean = false)\n\t\t{\n\t\t\tif (ary !== null && ary !== undefined)\n\t\t\t{\n\t\t\t\tif (cloneAry)\n\t\t\t\t{\n\t\t\t\t\tthis._list = ary.slice(0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis._list = ary;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._list = new Array<T>();\n\t\t\t}\n\t\t}\n\n\t\tpublic dump(handle: IDumpHandler, desc: string = \"\"): void\n\t\t{\n\t\t\tif (!handle) return;\n\n\t\t\tif (desc)\n\t\t\t{\n\t\t\t\tconsole.log(\"-- \" + desc + \" --\");\n\t\t\t}\n\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tvar item: any = this._list[i];\n\t\t\t\tvar itemStr: string = handle(item);\n\t\t\t\tif (itemStr === null || itemStr === undefined) itemStr = \"\";\n\t\t\t\tconsole.log(\"list::dump\", i, itemStr);\n\t\t\t}\n\t\t}\n\n\t\t/** 排序 */\n\t\tpublic sort(sortHandler: CompareMethod): void\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis._list.sort(sortHandler);\n\t\t\t}\n\t\t\tcatch (err) { }\n\t\t}\n\n\t\t/**\n\t\t * 克隆一个新的列表对象, 并且包含相同的成员\n\t\t * @param {boolean} [deep] 是否使用深度克隆 (暂时没有实现深度克隆)\n\t\t * @returns {*} \n\t\t * @memberOf List\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: List<T> = new List<T>();\n\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.add(this._list[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 同步至数组的内容\n\t\t * @param {Array<T>} ary \n\t\t * @memberOf List\n\t\t */\n\t\tpublic sync(ary: Array<T>): void\n\t\t{\n\t\t\tif (ary === null) return;\n\t\t\tif (ary === undefined) return;\n\n\t\t\tfor (var i: number = this._list.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tlet item: T = this._list[i];\n\t\t\t\tif (ary.indexOf(item) < 0) this.removeAt(i);\n\t\t\t}\n\n\t\t\tfor (var i: number = 0; i < ary.length; i++)\n\t\t\t{\n\t\t\t\tlet item: T = ary[i];\n\t\t\t\tif (this._list.indexOf(item) < 0) this.add(item);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf List\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new ListEnumerator(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引的项目\n\t\t * @param index 索引\n\t\t */\n\t\tpublic at(index: number): T\n\t\t{\n\t\t\tif (index >= 0 && index < this._list.length)\n\t\t\t{\n\t\t\t\treturn this._list[index];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 设置指定索引的项目\n\t\t * @param {T} item 项目\n\t\t * @param {number} index 索引\n\t\t * @memberOf List\n\t\t */\n\t\tpublic modify(item: T, index: number): void\n\t\t{\n\t\t\tif (index < 0 || index >= this._list.length) return;\n\t\t\tif (this._list[index] === item) return;\n\t\t\tvar oldValue: T = this._list[index];\n\t\t\tthis._list[index] = item;\n\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Modify, this, index, item, oldValue));\n\t\t}\n\n\t\t/**\n\t\t * 添加项目\n\t\t * @param item 项目\n\t\t */\n\t\tpublic add(item: T): T\n\t\t{\n\t\t\tthis._list.push(item);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, this._list.length - 1, item, null));\n\t\t\treturn item;\n\t\t}\n\n\t\t/** 添加一个数组的所有成员 */\n\t\tpublic addArray(itemArray: T[]): number\n\t\t{\n\t\t\tfor (var i: number = 0; i < itemArray.length; i++)\n\t\t\t{\n\t\t\t\tthis.add(itemArray[i]);\n\t\t\t}\n\t\t\treturn itemArray.length;\n\t\t}\n\n\t\t/**\n\t\t * 移除项目\n\t\t * @param item 项目\n\t\t */\n\t\tpublic remove(item: T): T\n\t\t{\n\t\t\tvar i = this._list.indexOf(item);\n\t\t\tif (i < 0) return;\n\t\t\tthis._list.splice(i, 1);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, i, null, item));\n\t\t\treturn item;\n\t\t}\n\n\t\t/**\n\t\t * 插入项目\n\t\t * @param item 项目\n\t\t * @param index 索引\n\t\t */\n\t\tpublic insert(item: T, index: number): T\n\t\t{\n\t\t\tif (this._list.length > 0)\n\t\t\t{\n\t\t\t\tif (index < 0 || index > this._list.length - 1) return;\n\t\t\t\tthis._list.splice(index, 0, item);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex = this._list.length;\n\t\t\t\tthis._list.push(item);\n\t\t\t}\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, index, item, null));\n\t\t\treturn item;\n\t\t}\n\n\t\t/**\n\t\t * 移除指定索引的项目\n\t\t * @param index 索引\n\t\t */\n\t\tpublic removeAt(index: number): T\n\t\t{\n\t\t\tvar ret = this._list[index];\n\t\t\tthis._list.splice(index, 1);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, index, null, ret));\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空所有项目\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tif (this._list.length == 0) return;\n\t\t\tthis._list.splice(0, this._list.length);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Clear, this, 0, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 查找项目\n\t\t * @param item 目标项目\n\t\t */\n\t\tpublic indexOf(item: T): number\n\t\t{\n\t\t\treturn this._list.indexOf(item);\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通数组\n\t\t */\n\t\tpublic toArray(): Array<T>\n\t\t{\n\t\t\treturn this._list.slice(0);\n\t\t}\n\n\t\t/**\n\t\t * 转换成字符串信息\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"List [\" + this._list.toString() + \"]\";\n\t\t}\n\n\t\t/**\n\t\t * 使用分隔符将所有成员拼成一个字符串\n\t\t */\n\t\tpublic join(separator: string): string\n\t\t{\n\t\t\treturn this._list.join(separator);\n\t\t}\n\n\t\t/**\n\t\t * 获取长度\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t\t/**\n\t\t * 是否开启事件通知\n\t\t * @type {boolean}\n\t\t * @memberOf List\n\t\t */\n\t\tpublic eventEnabled: boolean = false;\n\t}\n\n\t/**\n\t * 列表迭代器\n\t * @export\n\t * @class ListEnumerator\n\t * @implements {IEnumerator}\n\t */\n\texport class ListEnumerator implements IEnumerator\n\t{\n\t\tprivate _list: List<any>;\n\t\tprivate _index: number;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {List<any>} list \n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tconstructor(list: List<any>)\n\t\t{\n\t\t\tthis._list = list;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._index = 0;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index++;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._list.at(this._index);\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\tif (this._list && this._index >= 0 && this._index < this._list.length)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * 队列\n\t * @export\n\t * @class Queue\n\t * @template T \n\t */\n\texport class Queue<T> implements IEnumerable, ICloneable\n\t{\n\n\t\tprivate _list: Array<T>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf Queue\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._list = new Array<T>();\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Queue<T> = new Queue<T>();\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.add(this._list[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new QueueEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 添加一个成员到队列尾部\n\t\t * @param {T} item \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic add(item: T): void\n\t\t{\n\t\t\tthis._list.push(item);\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, this.length - 1, item, null));\n\t\t}\n\n\t\t/**\n\t\t * 从队列头部移除一个成员\n\t\t * @returns {T} \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic remove(): T\n\t\t{\n\t\t\tvar ret: T = null;\n\t\t\tif (this._list.length > 0) ret = this._list.shift(); else return null;\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, 0, ret, null));\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空整个队列\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tthis._list.splice(0, this._list.length);\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Clear, this, 0, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通数组\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic toArray(): Array<any>\n\t\t{\n\t\t\treturn this._list.slice(0);\n\t\t}\n\n\t\t/**\n\t\t * 转换成文本信息\n\t\t * @returns {string} \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"Queue[\" + this._list.toString() + \"]\";\n\t\t}\n\n\t\t/**\n\t\t * 返回队列成员数量\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t\t/**\n\t\t * 返回队列头部的成员\n\t\t * @readonly\n\t\t * @type {T}\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic get current(): T\n\t\t{\n\t\t\tif (this._list.length == 0) return null;\n\t\t\treturn this._list[0];\n\t\t}\n\t}\n\n\t/**\n\t * 队列迭代器\n\t * @export\n\t * @class QueueEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class QueueEnumrator implements IEnumerator\n\t{\n\t\tprivate _queue: Queue<any>;\n\t\tprivate _temp: Queue<any>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Queue<any>} queue \n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tconstructor(queue: Queue<any>)\n\t\t{\n\t\t\tthis._queue = queue;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置\n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._temp = this._queue.clone();\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._temp.remove();\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._temp.current;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * \n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\treturn !(this._temp && this._temp.length >= 1);\n\t\t}\n\t}\n\n\t/**\n\t * 树形节点\n\t * @export\n\t * @class Node\n\t * @template T \n\t */\n\texport class Node<T> implements IEnumerable, ICloneable\n\t{\n\t\tprivate _id: string;\n\t\tprivate _nodes: List<Node<T>>;\n\t\tprivate _parentNode: Node<T>;\n\t\tprivate _data: T;\n\n\t\t/**\n\t\t * Creates an instance of Node.\n\t\t * @memberOf Node\n\t\t */\n\t\tconstructor(id: string)\n\t\t{\n\t\t\tthis._nodes = new List<Node<T>>();\n\t\t\tthis._id = id;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new NodeEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 克隆节点\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Node<T> = new Node<T>(this._id);\n\n\t\t\tfor (var i: number = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tvar c: Node<T> = this._nodes.at(i);\n\t\t\t\tif (deep) c = c.clone(deep);\n\t\t\t\tret.add(c);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空所有子节点\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tfor (var i = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tvar node: Node<T> = this._nodes[i];\n\t\t\t\tnode._parentNode = null;\n\t\t\t}\n\t\t\tthis._nodes.clear();\n\t\t}\n\n\t\t/**\n\t\t * 添加一个子节点\n\t\t * @param {Node<T>} node \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic add(node: Node<T>): Node<T>\n\t\t{\n\t\t\tnode._parentNode = this;\n\t\t\treturn this._nodes.add(node);\n\t\t}\n\n\t\t/**\n\t\t * 插入一个子节点\n\t\t * @param {Node<T>} node \n\t\t * @param {number} index \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic insert(node: Node<T>, index: number): Node<T>\n\t\t{\n\t\t\tvar ret: Node<T> = node;\n\t\t\tnode._parentNode = this;\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 移除子节点\n\t\t * @param {Node<T>} node \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic remove(node: Node<T>): Node<T>\n\t\t{\n\t\t\tnode._parentNode = null;\n\t\t\treturn this._nodes.remove(node);\n\t\t}\n\n\t\t/**\n\t\t * 移除指定索引的子节点\n\t\t * @param {number} index \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic removeAt(index: number): Node<T>\n\t\t{\n\t\t\tvar ret = this._nodes.at(index);\n\t\t\tthis._nodes.removeAt(index);\n\t\t\tret._parentNode = null;\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 从节点的父级移除\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic removeFromParent(): void\n\t\t{\n\t\t\tif (this._parentNode)\n\t\t\t{\n\t\t\t\tthis._parentNode.remove(this);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引的子节点\n\t\t * @param {number} index \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic at(index: number): Node<T>\n\t\t{\n\t\t\tvar ret = this._nodes.at(index);\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 搜索特定子节点的索引\n\t\t * @param {Node<T>} node \n\t\t * @returns {number} \n\t\t * \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic indexOf(node: Node<T>): number\n\t\t{\n\t\t\treturn this._nodes.indexOf(node);\n\t\t}\n\n\t\t/**\n\t\t * 查找到定ID的节点\n\t\t * @param {string} id \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic find(id: string): Node<T>\n\t\t{\n\t\t\tif (this._id === id) return this;\n\t\t\tfor (var i: number = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tlet n: Node<T> = this._nodes.at(i);\n\t\t\t\tif (n.id === id) return n;\n\t\t\t\tlet cn: Node<T> = n.find(id);\n\t\t\t\tif (cn) return cn;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 查找指定数据的节点\n\t\t * @param {T} d \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic findData(d: T): Node<T>\n\t\t{\n\t\t\tif (this._data === d) return this;\n\t\t\tfor (var i: number = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tlet n: Node<T> = this._nodes.at(i);\n\t\t\t\tif (n.data === d) return n;\n\t\t\t\tlet cn: Node<T> = n.findData(d);\n\t\t\t\tif (cn) return cn;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取节点到根的逐级节点\n\t\t * @returns {Array<Node<T>>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic getParentNodes(): Array<Node<T>>\n\t\t{\n\t\t\tvar ret: Array<Node<T>> = new Array<Node<T>>();\n\t\t\tvar temp: Node<T> = this;\n\t\t\twhile (temp)\n\t\t\t{\n\t\t\t\tret.splice(0, 0, temp);\n\t\t\t\ttemp = temp.parentNode;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取与另一个节点的共同父级节点\n\t\t * @param {Node<T>} node \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic getParentByOtherNode(node: Node<T>): Node<T>\n\t\t{\n\t\t\tvar p1: Array<Node<T>> = this.getParentNodes();\n\t\t\tvar p2: Array<Node<T>> = node.getParentNodes();\n\n\t\t\tvar ret: Node<T> = null;\n\n\t\t\tfor (var i: number = 0; i < p1.length; i++)\n\t\t\t{\n\t\t\t\tvar n1: Node<T> = p1[i];\n\t\t\t\tvar n2: Node<T> = null;\n\n\t\t\t\tif (i < p2.length)\n\t\t\t\t{\n\t\t\t\t\tn2 = p2[i];\n\t\t\t\t}\n\n\t\t\t\tif (n1 === n2) ret = n1;\n\t\t\t\telse break;\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t//---------------------- refs\n\n\t\t/**\n\t\t * 获取第一个子节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get firstChild(): Node<T>\n\t\t{\n\t\t\tif (this._nodes.length > 0)\n\t\t\t{\n\t\t\t\treturn this._nodes.at(0);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取最后一个子节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get lastChild(): Node<T>\n\t\t{\n\t\t\tif (this._nodes.length > 0)\n\t\t\t{\n\t\t\t\treturn this._nodes.at(this._nodes.length - 1);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取第一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get firstNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode) return this._parentNode.firstChild;\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取上一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get prevNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode)\n\t\t\t{\n\t\t\t\tvar i: number = this._parentNode.indexOf(this);\n\t\t\t\tif (i > 0) return this._parentNode.at(i - 1);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取下一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get nextNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode)\n\t\t\t{\n\t\t\t\tvar i = this._parentNode.indexOf(this);\n\t\t\t\tif (i >= this._parentNode.length) return null;\n\t\t\t\tif (i < 0) return null;\n\n\t\t\t\treturn this._parentNode.at(i + 1);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取最后一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get lastNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode) return this._parentNode.lastChild;\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取数据\n\t\t * @type {T}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get data(): T\n\t\t{\n\t\t\treturn this._data;\n\t\t}\n\t\t/**\n\t\t * 设置数据\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic set data(value: T)\n\t\t{\n\t\t\tthis._data = value;\n\t\t}\n\n\t\t/**\n\t\t * 获取字符串信息\n\t\t * @returns {string} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\tvar temp: any = this._data;\n\t\t\tif (temp || temp === 0 || temp === false)\n\t\t\t{\n\t\t\t\treturn \"Node \" + JSON.stringify(this._data);\n\t\t\t}\n\t\t\telse return \"Node {}\";\n\t\t}\n\n\t\t//---------------------- properties\n\n\t\t/**\n\t\t * 获取子节点的数量\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._nodes.length;\n\t\t}\n\n\t\t/**\n\t\t * 获取父级节点实例\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get parentNode(): Node<T>\n\t\t{\n\t\t\treturn this._parentNode;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前节点的ID\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get id(): string\n\t\t{\n\t\t\treturn this._id;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前节点的深度级别\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get level(): number\n\t\t{\n\t\t\tvar ret: number = 0;\n\t\t\tvar temp: Node<T> = this;\n\t\t\twhile (temp.parentNode)\n\t\t\t{\n\t\t\t\ttemp = temp.parentNode;\n\t\t\t\tret++;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取根节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get rootNode(): Node<T>\n\t\t{\n\t\t\tvar ret: Node<T> = this;\n\t\t\twhile (ret.parentNode)\n\t\t\t{\n\t\t\t\tret = ret.parentNode;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取节点路径\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get path(): string\n\t\t{\n\t\t\tvar ary = new Array<string>();\n\n\t\t\tvar n: Node<T> = this;\n\t\t\twhile (n)\n\t\t\t{\n\t\t\t\tary.splice(0, 0, n.id);\n\t\t\t\tn = n.parentNode;\n\t\t\t}\n\n\t\t\treturn ary.join(\"/\");\n\t\t}\n\t}\n\n\t/**\n\t * 树形节点迭代器\n\t * @export\n\t * @class NodeEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class NodeEnumrator implements IEnumerator\n\t{\n\t\tprivate _node: Node<any>;\n\t\tprivate _temp: Node<any>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Node<any>} node \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tconstructor(node: Node<any>)\n\t\t{\n\t\t\tthis._node = node;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._temp = this._node;//.clone();\n\t\t}\n\n\t\t/**\n\t\t * 下一个\n\t\t * @returns {void} \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tif (this._temp.firstChild && this._temp.firstChild !== this._temp)\n\t\t\t{\n\t\t\t\tthis._temp = this._temp.firstChild;\n\t\t\t}\n\t\t\telse if (this._temp.nextNode && this._temp.nextNode !== this._temp)\n\t\t\t{\n\t\t\t\tthis._temp = this._temp.nextNode;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (this._temp.parentNode)\n\t\t\t\t{\n\t\t\t\t\tthis._temp = this._temp.parentNode;\n\n\t\t\t\t\tif (this._temp === this._node)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._temp = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._temp.nextNode !== this._temp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._temp = this._temp.nextNode;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._temp = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项目\n\t\t * @returns {*} \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._temp;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\treturn !this._temp;\n\t\t}\n\t}\n\n\n\t/**\n\t * 栈\n\t */\n\texport class Stack<T> implements IEnumerable, ICloneable\n\t{\n\t\tprotected _list: Array<T>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf Stack\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._list = new Array<T>();\n\t\t}\n\n\t\t/**\n\t\t * 获取一个迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new StackEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Stack<T> = new Stack<T>();\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.add(this._list[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空内容\n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tthis._list.splice(0, this._list.length);\n\t\t}\n\n\t\t/**\n\t\t * 添加一个成员\n\t\t * @param {T} item \n\t\t * @returns {T} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic add(item: T): T\n\t\t{\n\t\t\tthis._list.push(item);\n\t\t\treturn item;\n\t\t}\n\n\t\t/**\n\t\t * 移除一个成员\n\t\t * @returns {T} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic remove(): T\n\t\t{\n\t\t\tif (this._list.length > 0)\n\t\t\t{\n\t\t\t\treturn this._list.pop();\t//[this._list.length - 1];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通数组\n\t\t * @returns {Array<any>} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic toArray(clone: boolean = true): Array<any>\n\t\t{\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\treturn this._list.slice(0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this._list;\n\t\t\t}\n\t\t}\n\n\t\tpublic indexOf(item: T): number\n\t\t{\n\t\t\treturn this._list.indexOf(item);\n\t\t}\n\n\t\t/**\n\t\t * 获取字符串信息\n\t\t * @returns {string} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"Stack[\" + this._list.toString() + \"]\";\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @readonly\n\t\t * @type {T}\n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic get current(): T\n\t\t{\n\t\t\tif (this._list.length > 0)\n\t\t\t{\n\t\t\t\treturn this._list[this._list.length - 1];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取长度\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t}\n\n\t/**\n\t * 栈迭代器\n\t * @export\n\t * @class StackEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class StackEnumrator implements IEnumerator\n\t{\n\t\tprivate _stack: Stack<any>;\n\t\tprivate _temp: Array<any>;\n\t\tprivate _index: number = 0;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Stack<any>} stack \n\t\t * \n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tconstructor(stack: Stack<any>)\n\t\t{\n\t\t\tthis._stack = stack;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._temp = this._stack.toArray();\n\t\t\tthis._index = this._temp.length - 1;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index--;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\tif (this._index >= 0 && this._index < this._temp.length)\n\t\t\t{\n\t\t\t\treturn this._temp[this._index];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\tif (this._index >= this._temp.length) return true;\n\t\t\tif (this._index < 0) return true;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * 环形结构\n\t * @export\n\t * @class Ring\n\t * @implements {IEnumerable}\n\t * @implements {ICloneable}\n\t * @template T \n\t */\n\texport class Ring<T> implements IEnumerable, ICloneable\n\t{\n\t\tprotected _list: Array<T>;\n\t\tconstructor()\n\t\t{\n\t\t\tthis._list = new Array<T>();\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Ring<T> = new Ring<T>();\n\t\t\tret.count = this.count;\n\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.set(this._list[i], i);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new RingEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引\n\t\t * @protected\n\t\t * @param {number} index \n\t\t * @param {number} offset \n\t\t * @returns {number} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic getIndex(index: number, offset: number): number\n\t\t{\n\t\t\tvar ret: number = index + offset;\n\t\t\twhile (ret < 0)\n\t\t\t{\n\t\t\t\tret += this._list.length;\n\t\t\t}\n\n\t\t\tret = ret % this._list.length;\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空内容\n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tif (this._list.length === 0) return;\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tthis._list[i] = null;\n\t\t\t}\n\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(\n\t\t\t\tthis, DataCollectionChangeType.Clear,\n\t\t\t\tthis, 0, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引的内容\n\t\t * @param {number} index \n\t\t * @param {number} [offset=0] \n\t\t * @returns {T} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic get(index: number, offset: number = 0): T\n\t\t{\n\t\t\tvar i: number = this.getIndex(index, offset);\n\t\t\treturn this._list[i];\n\t\t}\n\t\t/**\n\t\t * 设置指定索引的内容\n\t\t * @param {T} item \n\t\t * @param {number} index \n\t\t * @param {number} [offset=0] \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic set(item: T, index: number, offset: number = 0): void\n\t\t{\n\t\t\tvar i: number = this.getIndex(index, offset);\n\t\t\tvar oldValue: T = this._list[i];\n\n\t\t\tif (oldValue === item) return;\n\t\t\tthis._list[i] = item;\n\n\t\t\tgetDataBindManager().distEvent(\n\t\t\t\tnew DataListChangeEventArgs(\n\t\t\t\t\tthis, DataCollectionChangeType.Modify,\n\t\t\t\t\tthis, index, item, oldValue));\n\t\t}\n\n\t\t/**\n\t\t * 获取数量\n\t\t * @type {number}\n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic get count(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t\t/**\n\t\t * 设置数量\n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic set count(v: number)\n\t\t{\n\t\t\tvar offset: number = v - this._list.length;\n\n\t\t\tif (offset === 0) return;\n\n\t\t\tif (offset > 0)\n\t\t\t{\n\t\t\t\tfor (var i: number = 0; i < offset; i++)\n\t\t\t\t{\n\t\t\t\t\tthis._list.push(null);\n\t\t\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, this._list.length - 1, null, null));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffset = Math.abs(offset);\n\t\t\t\tfor (var i: number = 0; i < offset; i++)\n\t\t\t\t{\n\t\t\t\t\tvar index: number = this._list.length - 1;\n\t\t\t\t\tvar oldValue: T = this._list.pop();\n\t\t\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, index, null, oldValue));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 环形结构迭代器\n\t * @export\n\t * @class RingEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class RingEnumrator implements IEnumerator\n\t{\n\t\tprotected _ring: Ring<any>;\n\t\tprotected _index: number;\n\t\tprotected _offset: number;\n\n\t\t/**\n\t\t * 构造\n\t\t * Creates an instance of RingEnumrator.\n\t\t * @param {Ring<any>} ring \n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tconstructor(ring: Ring<any>)\n\t\t{\n\t\t\tthis._ring = ring;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._index = 0;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index++;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._ring.get(this._index, this._offset);\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\treturn this._ring.count <= 0 || this._index >= this._ring.count;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前偏移索引\n\t\t * @type {number}\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic get offset(): number\n\t\t{\n\t\t\treturn this._offset;\n\t\t}\n\t\t/**\n\t\t * 设置当前偏移索引\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic set offset(v: number)\n\t\t{\n\t\t\tthis._offset = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前索引\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic get index(): number\n\t\t{\n\t\t\tif (this._ring.count <= 0) return 0;\n\t\t\tvar ret: number = this._index + this._offset;\n\t\t\tret = ret % this._ring.count;\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * 比较方法\n\t */\n\texport interface CompareMethod\n\t{\n\t\t(a: any, b: any): CompareResult\n\t}\n\n\t/**\n\t * 比较结果\n\t * @export\n\t * @enum {number}\n\t */\n\texport enum CompareResult\n\t{\n\t\t/**\n\t\t * 较小\n\t\t */\n\t\tLESS = -1,\n\t\t/**\n\t\t * 相等\n\t\t */\n\t\tEQUAL = 0,\n\t\t/**\n\t\t * 较大\n\t\t */\n\t\tGREATER = 1\n\t}\n\n\t/**\n\t * 迭代遍历\n\t * @export\n\t * @param {IEnumerable} data \n\t * @param {Function} handler \n\t * @param {*} [target] \n\t * @returns {void} \n\t */\n\texport function foreach(data: IEnumerable, handler: Function, target?: any): void\n\t{\n\t\tif (!data) return;\n\t\tif (!handler) return;\n\n\t\tvar iter: IEnumerator = data.getEnumerator();\n\t\tif (!iter) return;\n\n\t\twhile (!iter.end())\n\t\t{\n\t\t\tvar item: any = iter.getCurrent();\n\t\t\tif (handler.call(target, item)) break;\n\n\t\t\titer.moveNext();\n\t\t}\n\t}\n\n};\n\nexport = FWSData; "]}