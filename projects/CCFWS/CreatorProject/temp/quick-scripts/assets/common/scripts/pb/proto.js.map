{"version":3,"sources":["proto.js"],"names":["$protobuf","protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","TestEnum","valuesById","values","Object","create","TestMsgA","properties","keys","i","length","prototype","A","B","C","D","E","encode","message","writer","uint32","string","int32","double","bool","hasOwnProperty","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","ProtocolError","instance","decodeDelimited","verify","isString","isInteger","fromObject","object","String","Number","Boolean","toObject","options","defaults","json","isFinite","toJSON","constructor","toJSONOptions","TestMsgB","nums","id","msg","emptyArray","fork","end2","push","error","Array","isArray","TypeError","arrays","j","module","exports"],"mappings":"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","file":"proto.js","sourceRoot":"../../../../../../assets/common/scripts/pb","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\n//NOTE: FIXME\n// var $protobuf = require(\"protobufjs/minimal\");\nvar $protobuf = protobuf;\n\n\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n/**\n * TestEnum enum.\n * @exports TestEnum\n * @enum {string}\n * @property {number} A=1 A value\n * @property {number} B=100 B value\n * @property {number} C=101 C value\n */\n$root.TestEnum = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[1] = \"A\"] = 1;\n    values[valuesById[100] = \"B\"] = 100;\n    values[valuesById[101] = \"C\"] = 101;\n    return values;\n})();\n\n$root.TestMsgA = (function() {\n\n    /**\n     * Properties of a TestMsgA.\n     * @exports ITestMsgA\n     * @interface ITestMsgA\n     * @property {string} A TestMsgA A\n     * @property {number} B TestMsgA B\n     * @property {number} C TestMsgA C\n     * @property {boolean} D TestMsgA D\n     * @property {number|null} [E] TestMsgA E\n     */\n\n    /**\n     * Constructs a new TestMsgA.\n     * @exports TestMsgA\n     * @classdesc Represents a TestMsgA.\n     * @implements ITestMsgA\n     * @constructor\n     * @param {ITestMsgA=} [properties] Properties to set\n     */\n    function TestMsgA(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TestMsgA A.\n     * @member {string} A\n     * @memberof TestMsgA\n     * @instance\n     */\n    TestMsgA.prototype.A = \"\";\n\n    /**\n     * TestMsgA B.\n     * @member {number} B\n     * @memberof TestMsgA\n     * @instance\n     */\n    TestMsgA.prototype.B = 0;\n\n    /**\n     * TestMsgA C.\n     * @member {number} C\n     * @memberof TestMsgA\n     * @instance\n     */\n    TestMsgA.prototype.C = 0;\n\n    /**\n     * TestMsgA D.\n     * @member {boolean} D\n     * @memberof TestMsgA\n     * @instance\n     */\n    TestMsgA.prototype.D = false;\n\n    /**\n     * TestMsgA E.\n     * @member {number} E\n     * @memberof TestMsgA\n     * @instance\n     */\n    TestMsgA.prototype.E = 0;\n\n    /**\n     * Creates a new TestMsgA instance using the specified properties.\n     * @function create\n     * @memberof TestMsgA\n     * @static\n     * @param {ITestMsgA=} [properties] Properties to set\n     * @returns {TestMsgA} TestMsgA instance\n     */\n    TestMsgA.create = function create(properties) {\n        return new TestMsgA(properties);\n    };\n\n    /**\n     * Encodes the specified TestMsgA message. Does not implicitly {@link TestMsgA.verify|verify} messages.\n     * @function encode\n     * @memberof TestMsgA\n     * @static\n     * @param {ITestMsgA} message TestMsgA message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TestMsgA.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        writer.uint32(/* id 1, wireType 2 =*/10).string(message.A);\n        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.B);\n        writer.uint32(/* id 3, wireType 1 =*/25).double(message.C);\n        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.D);\n        if (message.E != null && message.hasOwnProperty(\"E\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.E);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TestMsgA message, length delimited. Does not implicitly {@link TestMsgA.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TestMsgA\n     * @static\n     * @param {ITestMsgA} message TestMsgA message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TestMsgA.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TestMsgA message from the specified reader or buffer.\n     * @function decode\n     * @memberof TestMsgA\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TestMsgA} TestMsgA\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TestMsgA.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TestMsgA();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.A = reader.string();\n                break;\n            case 2:\n                message.B = reader.int32();\n                break;\n            case 3:\n                message.C = reader.double();\n                break;\n            case 4:\n                message.D = reader.bool();\n                break;\n            case 5:\n                message.E = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        if (!message.hasOwnProperty(\"A\"))\n            throw $util.ProtocolError(\"missing required 'A'\", { instance: message });\n        if (!message.hasOwnProperty(\"B\"))\n            throw $util.ProtocolError(\"missing required 'B'\", { instance: message });\n        if (!message.hasOwnProperty(\"C\"))\n            throw $util.ProtocolError(\"missing required 'C'\", { instance: message });\n        if (!message.hasOwnProperty(\"D\"))\n            throw $util.ProtocolError(\"missing required 'D'\", { instance: message });\n        return message;\n    };\n\n    /**\n     * Decodes a TestMsgA message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TestMsgA\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TestMsgA} TestMsgA\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TestMsgA.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TestMsgA message.\n     * @function verify\n     * @memberof TestMsgA\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TestMsgA.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (!$util.isString(message.A))\n            return \"A: string expected\";\n        if (!$util.isInteger(message.B))\n            return \"B: integer expected\";\n        if (typeof message.C !== \"number\")\n            return \"C: number expected\";\n        if (typeof message.D !== \"boolean\")\n            return \"D: boolean expected\";\n        if (message.E != null && message.hasOwnProperty(\"E\"))\n            if (!$util.isInteger(message.E))\n                return \"E: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a TestMsgA message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TestMsgA\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TestMsgA} TestMsgA\n     */\n    TestMsgA.fromObject = function fromObject(object) {\n        if (object instanceof $root.TestMsgA)\n            return object;\n        var message = new $root.TestMsgA();\n        if (object.A != null)\n            message.A = String(object.A);\n        if (object.B != null)\n            message.B = object.B | 0;\n        if (object.C != null)\n            message.C = Number(object.C);\n        if (object.D != null)\n            message.D = Boolean(object.D);\n        if (object.E != null)\n            message.E = object.E >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TestMsgA message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TestMsgA\n     * @static\n     * @param {TestMsgA} message TestMsgA\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TestMsgA.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.A = \"\";\n            object.B = 0;\n            object.C = 0;\n            object.D = false;\n            object.E = 0;\n        }\n        if (message.A != null && message.hasOwnProperty(\"A\"))\n            object.A = message.A;\n        if (message.B != null && message.hasOwnProperty(\"B\"))\n            object.B = message.B;\n        if (message.C != null && message.hasOwnProperty(\"C\"))\n            object.C = options.json && !isFinite(message.C) ? String(message.C) : message.C;\n        if (message.D != null && message.hasOwnProperty(\"D\"))\n            object.D = message.D;\n        if (message.E != null && message.hasOwnProperty(\"E\"))\n            object.E = message.E;\n        return object;\n    };\n\n    /**\n     * Converts this TestMsgA to JSON.\n     * @function toJSON\n     * @memberof TestMsgA\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TestMsgA.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TestMsgA;\n})();\n\n$root.TestMsgB = (function() {\n\n    /**\n     * Properties of a TestMsgB.\n     * @exports ITestMsgB\n     * @interface ITestMsgB\n     * @property {number} id TestMsgB id\n     * @property {ITestMsgA|null} [msg] TestMsgB msg\n     * @property {Array.<number>|null} [nums] TestMsgB nums\n     */\n\n    /**\n     * Constructs a new TestMsgB.\n     * @exports TestMsgB\n     * @classdesc Represents a TestMsgB.\n     * @implements ITestMsgB\n     * @constructor\n     * @param {ITestMsgB=} [properties] Properties to set\n     */\n    function TestMsgB(properties) {\n        this.nums = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TestMsgB id.\n     * @member {number} id\n     * @memberof TestMsgB\n     * @instance\n     */\n    TestMsgB.prototype.id = 0;\n\n    /**\n     * TestMsgB msg.\n     * @member {ITestMsgA|null|undefined} msg\n     * @memberof TestMsgB\n     * @instance\n     */\n    TestMsgB.prototype.msg = null;\n\n    /**\n     * TestMsgB nums.\n     * @member {Array.<number>} nums\n     * @memberof TestMsgB\n     * @instance\n     */\n    TestMsgB.prototype.nums = $util.emptyArray;\n\n    /**\n     * Creates a new TestMsgB instance using the specified properties.\n     * @function create\n     * @memberof TestMsgB\n     * @static\n     * @param {ITestMsgB=} [properties] Properties to set\n     * @returns {TestMsgB} TestMsgB instance\n     */\n    TestMsgB.create = function create(properties) {\n        return new TestMsgB(properties);\n    };\n\n    /**\n     * Encodes the specified TestMsgB message. Does not implicitly {@link TestMsgB.verify|verify} messages.\n     * @function encode\n     * @memberof TestMsgB\n     * @static\n     * @param {ITestMsgB} message TestMsgB message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TestMsgB.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);\n        if (message.msg != null && message.hasOwnProperty(\"msg\"))\n            $root.TestMsgA.encode(message.msg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.nums != null && message.nums.length)\n            for (var i = 0; i < message.nums.length; ++i)\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nums[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TestMsgB message, length delimited. Does not implicitly {@link TestMsgB.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TestMsgB\n     * @static\n     * @param {ITestMsgB} message TestMsgB message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TestMsgB.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TestMsgB message from the specified reader or buffer.\n     * @function decode\n     * @memberof TestMsgB\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TestMsgB} TestMsgB\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TestMsgB.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TestMsgB();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.int32();\n                break;\n            case 2:\n                message.msg = $root.TestMsgA.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.nums && message.nums.length))\n                    message.nums = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.nums.push(reader.int32());\n                } else\n                    message.nums.push(reader.int32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        if (!message.hasOwnProperty(\"id\"))\n            throw $util.ProtocolError(\"missing required 'id'\", { instance: message });\n        return message;\n    };\n\n    /**\n     * Decodes a TestMsgB message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TestMsgB\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TestMsgB} TestMsgB\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TestMsgB.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TestMsgB message.\n     * @function verify\n     * @memberof TestMsgB\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TestMsgB.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (!$util.isInteger(message.id))\n            return \"id: integer expected\";\n        if (message.msg != null && message.hasOwnProperty(\"msg\")) {\n            var error = $root.TestMsgA.verify(message.msg);\n            if (error)\n                return \"msg.\" + error;\n        }\n        if (message.nums != null && message.hasOwnProperty(\"nums\")) {\n            if (!Array.isArray(message.nums))\n                return \"nums: array expected\";\n            for (var i = 0; i < message.nums.length; ++i)\n                if (!$util.isInteger(message.nums[i]))\n                    return \"nums: integer[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TestMsgB message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TestMsgB\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TestMsgB} TestMsgB\n     */\n    TestMsgB.fromObject = function fromObject(object) {\n        if (object instanceof $root.TestMsgB)\n            return object;\n        var message = new $root.TestMsgB();\n        if (object.id != null)\n            message.id = object.id | 0;\n        if (object.msg != null) {\n            if (typeof object.msg !== \"object\")\n                throw TypeError(\".TestMsgB.msg: object expected\");\n            message.msg = $root.TestMsgA.fromObject(object.msg);\n        }\n        if (object.nums) {\n            if (!Array.isArray(object.nums))\n                throw TypeError(\".TestMsgB.nums: array expected\");\n            message.nums = [];\n            for (var i = 0; i < object.nums.length; ++i)\n                message.nums[i] = object.nums[i] | 0;\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TestMsgB message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TestMsgB\n     * @static\n     * @param {TestMsgB} message TestMsgB\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TestMsgB.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.nums = [];\n        if (options.defaults) {\n            object.id = 0;\n            object.msg = null;\n        }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.msg != null && message.hasOwnProperty(\"msg\"))\n            object.msg = $root.TestMsgA.toObject(message.msg, options);\n        if (message.nums && message.nums.length) {\n            object.nums = [];\n            for (var j = 0; j < message.nums.length; ++j)\n                object.nums[j] = message.nums[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TestMsgB to JSON.\n     * @function toJSON\n     * @memberof TestMsgB\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TestMsgB.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TestMsgB;\n})();\n\nmodule.exports = $root;\n"]}