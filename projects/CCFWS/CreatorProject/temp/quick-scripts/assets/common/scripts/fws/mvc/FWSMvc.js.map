{"version":3,"sources":["FWSMvc.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../../assets/resources/scripts/fws/mvc","sourcesContent":["/*\n * 公共代码的MVC框架, 接替原JS版的FWS_MVC\n * @Author: 刘强\n * @Date: 2017-03-01 14:19:48 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 16:50:52\n */\n\n\nimport FWSData = require('../data/FWSData');\nimport X = require('../utils/X');\nimport FWSEnv = require('../FWSEnv');\n\n\nmodule FWSMvc\n{\n\n\texport const MVC_CONTEXT_TRY_CATCH: boolean = true;\n\n\t//-------------------------------------- 状态系统\n\n\t/**\n\t * 上下文状态节点接口\n\t * @export\n\t * @interface IContext\n\t */\n\texport interface IContext\n\t{\n\t\tonEnterContext(): void;\n\t\tonLeaveContext(): void;\n\t\tsetModules(...mods: Array<IFMessageConnection>): void;\n\t}\n\n\t/**\n\t * 上下文状态点节的成员接口\n\t */\n\texport interface IContextMember\n\t{\n\t\tonEnterContextMember(): void;\n\t\tonLeaveContextMember(): void;\n\t}\n\n\t/**\n\t * 上下文状态节点\n\t * @export\n\t * @class FContext\n\t * @implements {IContext}\n\t */\n\texport class FContext implements IContext\n\t{\n\t\tprotected _id: string;\n\t\tprotected _mods: Array<IFMessageConnection>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf FContext\n\t\t */\n\t\tconstructor(id: string, ...mods: Array<IFMessageConnection>)\n\t\t{\n\t\t\tthis._id = id;\n\t\t\tthis._mods = new Array<IFMessageConnection>();\n\n\t\t}\n\n\t\tpublic initMessageConnections(mods: Array<IFMessageConnection>)\n\t\t{\n\t\t\tthis._mods.splice(0, this._mods.length);\n\t\t\tfor (var i: number = 0; i < mods.length; i++)\n\t\t\t{\n\t\t\t\tthis._mods.push(mods[i]);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 进入当前状态节点时\n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic onEnterContext(): void\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._mods.length; i++)\n\t\t\t{\n\t\t\t\tvar mod: IFMessageConnection = this._mods[i];\n\n\t\t\t\tif (mod.messageConnectionActived) \n\t\t\t\t{\n\t\t\t\t\tX.warn(\"(onEnterContext) IFMessageConnection::messageConnectionActived !\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tmod.onEnterContextMember();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err)\n\t\t\t\t\t{\n\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmod.onEnterContextMember();\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 离开当前状态节点时\n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic onLeaveContext(): void\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._mods.length; i++)\n\t\t\t{\n\t\t\t\tvar mod: IFMessageConnection = this._mods[i];\n\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tmod.onLeaveContextMember();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err)\n\t\t\t\t\t{\n\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmod.onLeaveContextMember();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 设置模块内容\n\t\t * @param {...Array<IFMessageConnection>} mods \n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic setModules(...mods: Array<IFMessageConnection>): void\n\t\t{\n\t\t\tfor (var i: number = 0; i < mods.length; i++)\n\t\t\t{\n\t\t\t\tthis._mods.push(mods[i]);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取上下文标识\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic get id(): string\n\t\t{\n\t\t\treturn this._id;\n\t\t}\n\t}\n\n\t/**\n\t * 上下文管理器实例\n\t * @class FContextManager\n\t */\n\tclass FContextManager\n\t{\n\t\tstatic _contextManager;\n\n\t\tprotected _root: FWSData.Node<IContext>;\n\t\tprotected _current: FWSData.Node<IContext>;\n\t\tprotected _history: FWSData.Stack<FWSData.Node<IContext>>;\n\n\t\tpublic onContextChanged: Function;\n\n\t\t/**\n\t\t * 构造\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tif (FContextManager._contextManager) throw \"FContextManager被设计为单例, 不能创建多个实例\";\n\n\t\t\tthis._history = new FWSData.Stack<FWSData.Node<IContext>>();\n\t\t}\n\n\t\t/**\n\t\t * 初始化\n\t\t * @param {FWSData.Node<IContext>} root \n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic init(root: FWSData.Node<IContext>): void\n\t\t{\n\t\t\tthis._root = root;\n\t\t}\n\n\n\t\t/**\n\t\t * 切换到指定的上下文节点\n\t\t * @param {FWSData.Node<IContext>} node \n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic goto(node: FWSData.Node<IContext>, sh: boolean = true): void\n\t\t{\n\t\t\tif (node && node.rootNode === this._root &&\n\t\t\t\tnode !== this._current)\n\t\t\t{\n\t\t\t\tvar theParentNode: FWSData.Node<IContext> = null;\n\n\t\t\t\t//关闭之前的无关节点\n\t\t\t\tif (this._current)\n\t\t\t\t{\n\t\t\t\t\ttheParentNode = this._current.getParentByOtherNode(node);\n\t\t\t\t\tvar closeList: Array<FWSData.Node<IContext>> = this._current.getParentNodes();\n\t\t\t\t\tvar closeListCount: number = closeList.length;\n\n\t\t\t\t\tfor (var i: number = closeListCount - 1; i >= 0; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar closeContext: FWSData.Node<IContext> = closeList[i];\n\n\t\t\t\t\t\tif (closeContext === theParentNode) break;\n\n\t\t\t\t\t\tif (FWSEnv.DEBUG_CONTEXT_TRACE) X.log(\"(Context) onLeaveContext\", closeContext.path);\n\t\t\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcloseContext.data.onLeaveContext();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (err)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcloseContext.data.onLeaveContext();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//打开需要的新节点\n\t\t\t\tvar found: boolean = false;\n\t\t\t\tvar openList: Array<FWSData.Node<IContext>> = node.getParentNodes();\n\t\t\t\tvar theParentNodeIsNull: boolean = true;\n\n\t\t\t\tif (theParentNode) theParentNodeIsNull = false;\n\n\t\t\t\tfor (var i: number = 0; i < openList.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar openContext: FWSData.Node<IContext> = openList[i];\n\t\t\t\t\tif (theParentNodeIsNull)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (FWSEnv.DEBUG_CONTEXT_TRACE) X.log(\"(Context) onEnterContext\", openContext.path);\n\t\t\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (err)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (found)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (openContext != theParentNode || theParentNodeIsNull)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (FWSEnv.DEBUG_CONTEXT_TRACE) X.log(\"(Context) onEnterContext\", openContext.path);\n\t\t\t\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (err)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (openContext === theParentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//----\n\t\t\t\tthis._current = node;\n\t\t\t\tif (sh) \n\t\t\t\t{\n\t\t\t\t\tthis._history.add(node);\n\t\t\t\t\tX.log(\"blue\", \"Context goto\", node.path);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tX.log(\"blue\", \"Context goto(no history)\", node.path);\n\t\t\t\t}\n\n\t\t\t\tif (this.onContextChanged)\n\t\t\t\t{\n\t\t\t\t\tthis.onContextChanged(node.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 切换到指定ID的上下文节点\n\t\t * \n\t\t * @param {string} id \n\t\t * \n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic gotoID(id: string): void\n\t\t{\n\t\t\tif (this._root)\n\t\t\t{\n\t\t\t\tvar node: FWSData.Node<IContext> = this._root.find(id);\n\t\t\t\tthis.goto(node);\n\t\t\t}\n\t\t}\n\n\t\t/** 检查指定的节点是否属激活状态 */\n\t\tpublic checkActived(node: FWSData.Node<IContext>): boolean\n\t\t{\n\t\t\tif (node && this._current)\n\t\t\t{\n\t\t\t\tvar n: FWSData.Node<IContext> = this._current;\n\t\t\t\twhile (n)\n\t\t\t\t{\n\t\t\t\t\tif (n === node) return true;\n\t\t\t\t\tn = n.parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/** 检查指定ID的节点是否属激活状态 */\n\t\tpublic checkActivedById(id: string): boolean\n\t\t{\n\t\t\tif (this._root)\n\t\t\t{\n\t\t\t\tvar node: FWSData.Node<IContext> = this._root.find(id);\n\t\t\t\treturn this.checkActived(node);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * 回退\n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic back(): void\n\t\t{\n\t\t\tif (this._history.length > 1)\n\t\t\t{\n\t\t\t\tvar backNode: FWSData.Node<IContext> = this._history.remove();\n\t\t\t\tthis.goto(this._history.current, false);\n\t\t\t}\n\t\t}\n\n\t\tpublic clearHistory(): void\n\t\t{\n\t\t\tthis._history.clear();\n\t\t}\n\n\t\t/**\n\t\t * 获取当前节点\n\t\t * \n\t\t * @readonly\n\t\t * @type {FWSData.Node<IContext>}\n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic get current(): FWSData.Node<IContext>\n\t\t{\n\t\t\treturn this._current;\n\t\t}\n\t}\n\n\t/**\n\t * 获取上下文管理器实例\n\t * @export\n\t * @returns {FContextManager} \n\t */\n\texport function ContextManager(): FContextManager\n\t{\n\t\tif (!FContextManager._contextManager) FContextManager._contextManager = new FContextManager();\n\t\treturn FContextManager._contextManager;\n\t}\n\n\t//-------------------------------------- 消息系统\n\n\t/**\n\t * MVC消息通知对象\n\t * @export\n\t * @class FMessage\n\t */\n\texport class FMessage<T>\n\t{\n\t\tprotected _key: string;\n\t\tprotected _queue: string;\n\t\tprotected _sended: boolean;\n\t\tprotected _completed: boolean;\n\t\tprotected _data: T;\n\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {string} key 消息标识\n\t\t * @param {string} [category=\"\"] 消息队列类型\n\t\t * @memberOf FMessage\n\t\t */\n\t\tconstructor(key: string, data:T, queue: string = \"\")\n\t\t{\n\t\t\tthis._key = key;\n\t\t\tthis._queue = queue;\n\t\t\tthis._data = data;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置附加数据\n\t\t */\n\t\tpublic get data():T\n\t\t{\n\t\t\treturn this._data;\n\t\t}\n\t\tpublic set data(v:T)\n\t\t{\n\t\t\tthis._data = v;\n\t\t}\n\t\t\n\n\t\t/** 重置 */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._sended = false;\n\t\t\tthis._completed = false;\n\t\t}\n\n\t\t/**\n\t\t * 将消息发至消息路由\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic send(): void\n\t\t{\n\t\t\tif (this._sended) return;\n\n\t\t\tRouter().send(this);\n\n\t\t\tthis._sended = true;\n\t\t}\n\n\t\t/**\n\t\t * 将消息标为完成\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic complete(): void\n\t\t{\n\t\t\tif (this._completed) return;\n\t\t\tthis._completed = true;\n\n\t\t\tRouter().complete(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取消息类型\n\t\t * @type {string}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get key(): string\n\t\t{\n\t\t\treturn this._key;\n\t\t}\n\t\t/**\n\t\t * 设置消息类型\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic set key(value: string)\n\t\t{\n\t\t\tthis._key = value;\n\t\t}\n\n\n\t\t/**\n\t\t * 获取消息队列类型\n\t\t * @type {string}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get queue(): string\n\t\t{\n\t\t\treturn this._queue;\n\t\t}\n\t\t/**\n\t\t * 设置消息队列类型\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic set queue(value: string)\n\t\t{\n\t\t\tthis._queue = value;\n\t\t}\n\n\t\t/**\n\t\t * 获取消息是否已经被标为完成\n\t\t * @readonly\n\t\t * @type {boolean}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get completed(): boolean\n\t\t{\n\t\t\treturn this._completed;\n\t\t}\n\n\t\t/**\n\t\t * 获取消息是否已经发至路由\n\t\t * @readonly\n\t\t * @type {boolean}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get sended(): boolean\n\t\t{\n\t\t\treturn this._sended;\n\t\t}\n\n\t\t\n\n\t\t/**\n\t\t * 返回文本信息\n\t\t * @returns {string} \n\t\t * @memberof FMessage\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\n\t\t\tvar ret: string = this._key + \", \";\n\t\t\tfor (var key in this._data)\n\t\t\t{\n\t\t\t\tvar value: any = this._data[key];\n\n\t\t\t\tif (value === null) value = \"null\";\n\t\t\t\telse if (value === undefined) value = \"undefined\";\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t//简单版本\n\t\t\t\t\t// if (!useJsonOutputFMessageArgs)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = value.toString();\n\t\t\t\t\t}\n\t\t\t\t\t//JSON版本\n\t\t\t\t\t// else\n\t\t\t\t\t// {\n\t\t\t\t\t// \tvalue = JSON.stringify(value);\n\t\t\t\t\t// }\n\t\t\t\t}\n\n\t\t\t\tif (ret.length > 0)\n\t\t\t\t{\n\t\t\t\t\tret += \",\";\n\t\t\t\t}\n\n\t\t\t\tret += key + \"=\" + value;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t}\n\n\t/**\n\t * MVC消息连接接口\n\t * @export\n\t * @interface IFMessageConnection\n\t */\n\texport interface IFMessageConnection extends IContextMember\n\t{\n\t\t/**\n\t\t * 处理消息通知\n\t\t * @param {FMessage} msg 传入的消息通知\n\t\t * @returns {boolean} 返回是否忽略该消息的处理\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tonFMessage(msg: FMessage<any>): boolean;\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tconnect(): void;\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tdisconnect(): void;\n\n\t\t/**\n\t\t * 接入路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tonConnect(): void;\n\n\t\t/**\n\t\t * 断开路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tonDisconnect(): void;\n\n\t\t/** 是否处于激活状态 */\n\t\tmessageConnectionActived: boolean;\n\t}\n\n\t/**\n\t * MVC消息连接的抽象类\n\t * @export\n\t * @class FMessageConnectionAbstract\n\t * @implements {IFMessageConnection}\n\t */\n\texport abstract class FMessageConnectionAbstract implements IFMessageConnection\n\t{\n\t\tprotected _messageConnectionActived: boolean;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._messageConnectionActived = false;\n\t\t}\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tpublic connect(): void\n\t\t{\n\t\t\tRouter().connect(this);\n\t\t\tthis.onConnect();\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tpublic disconnect(): void\n\t\t{\n\t\t\tRouter().disconnect(this);\n\t\t\tthis.onDisconnect();\n\t\t}\n\n\t\t/**\n\t\t * 接入路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tpublic onConnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 断开路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tpublic onDisconnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 处理消息通知\n\t\t * @param {FMessage} msg 传入的消息通知\n\t\t * @returns {boolean} 返回是否忽略该消息的处理\n\t\t * \n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tpublic onFMessage(msg: FMessage<any>): boolean\n\t\t{\n\t\t\tvar handlerName: string = \"onFMessage_\" + msg.key;\n\t\t\tvar handler: Function = this[handlerName];\n\t\t\tif (handler) \n\t\t\t{\n\t\t\t\treturn !handler.call(this, msg);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic onEnterContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = true;\n\t\t\tthis.connect();\n\t\t}\n\n\t\tpublic onLeaveContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = false;\n\t\t\tthis.disconnect();\n\t\t}\n\n\t\tpublic get messageConnectionActived(): boolean\n\t\t{\n\t\t\treturn this._messageConnectionActived;\n\t\t}\n\t}\n\n\t/**\n\t * MVC消息连接的代理类\n\t * @export\n\t * @class FMessageConnectionDelegate\n\t * @implements {IFMessageConnection}\n\t */\n\texport class FMessageConnectionDelegate implements IFMessageConnection\n\t{\n\t\tprotected _owner: any;\n\t\tprotected _messageConnectionActived: boolean;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {*} owner \n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tconstructor(owner: any)\n\t\t{\n\t\t\tthis._owner = owner;\n\t\t}\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic connect(): void\n\t\t{\n\t\t\tRouter().connect(this);\n\t\t\tthis.onConnect();\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic disconnect(): void\n\t\t{\n\t\t\tRouter().disconnect(this);\n\t\t\tthis.onDisconnect();\n\t\t}\n\n\t\t/**\n\t\t * 接入路由之后\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic onConnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 断开路由之后\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic onDisconnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 处理消息通知\n\t\t * @param {FMessage} msg 传入的消息通知\n\t\t * @returns {boolean} 返回是否忽略该消息的处理\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic onFMessage(msg: FMessage<any>): boolean\n\t\t{\n\t\t\tvar handlerName: string = \"onFMessage_\" + msg.key;\n\t\t\tvar handler: Function = this._owner[handlerName];\n\t\t\tif (handler) \n\t\t\t{\n\t\t\t\treturn !handler.call(this._owner, msg);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic onEnterContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = true;\n\t\t\tthis.connect();\n\t\t}\n\n\t\tpublic onLeaveContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = false;\n\t\t\tthis.disconnect();\n\t\t}\n\n\t\tpublic get messageConnectionActived(): boolean\n\t\t{\n\t\t\treturn this._messageConnectionActived;\n\t\t}\n\t}\n\n\t/**\n\t * MVC消息路由\n\t * @class FMessageRouter\n\t */\n\tclass FMessageRouter\n\t{\n\t\tstatic _router: FMessageRouter;\n\n\t\tprotected _queues: FWSData.Dict<FWSData.Queue<FMessage<any>>>;\n\t\tprotected _connections: FWSData.List<IFMessageConnection>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tif (FMessageRouter._router) throw \"FMessageRouter被设计为单例, 不能创建多个实例\";\n\t\t\tthis._queues = new FWSData.Dict<FWSData.Queue<FMessage<any>>>();\n\t\t\tthis._connections = new FWSData.List<IFMessageConnection>();\n\t\t}\n\n\t\t/**\n\t\t * 创建队列\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic createQueue(category: string): void\n\t\t{\n\t\t\tif (this._queues.containKey(category)) return;\n\t\t\tthis._queues.setItem(category, new FWSData.Queue<FMessage<any>>());\n\t\t}\n\n\t\t/**\n\t\t * 删除队列\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic removeQueue(category: string): void\n\t\t{\n\t\t\tif (!this._queues.containKey(category)) return;\n\t\t\tthis._queues.deleteKey(category);\n\t\t}\n\n\t\t/**\n\t\t * 删除所有队列\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic removeAllQueues(): void\n\t\t{\n\t\t\tthis._queues.clear();\n\t\t}\n\n\t\t/**\n\t\t * 获取队列\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic getQueue(category: string): FWSData.Queue<FMessage<any>>\n\t\t{\n\t\t\tif (this._queues.containKey(category))\n\t\t\t{\n\t\t\t\treturn this._queues.getItem(category);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 清空特定队列的消息\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic clearQueueMessages(category: string): void\n\t\t{\n\t\t\tX.log(\"FMessage\", \"clearQueueMessages\",  category);\n\t\t\tif (this._queues.containKey(category))\n\t\t\t{\n\t\t\t\tthis._queues.getItem(category).clear();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 清空所有队列的消息\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic clearAllQueueMessages(): void\n\t\t{\n\t\t\tvar keys: Array<string> = this._queues.keys;\n\t\t\tfor (var i: number = 0; i < keys.length; i++)\n\t\t\t{\n\t\t\t\tvar key: string = keys[i];\n\t\t\t\tthis._queues.getItem(key).clear();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @param {IFMessageConnection} connection \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic connect(connection: IFMessageConnection): void\n\t\t{\n\t\t\tif (this._connections.indexOf(connection) >= 0)\n\t\t\t{\n\t\t\t\t//警告:重复的连接\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._connections.add(connection);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @param {IFMessageConnection} connection \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic disconnect(connection: IFMessageConnection): void\n\t\t{\n\t\t\tif (this._connections.indexOf(connection) >= 0)\n\t\t\t{\n\t\t\t\tthis._connections.remove(connection);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开所有连接\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic disconnectAll(): void\n\t\t{\n\t\t\tthis._connections.clear();\n\t\t}\n\n\t\t/**\n\t\t * 发送消息到路由的队列\n\t\t * @param {FMessage} msg \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic send(msg: FMessage<any>): void\n\t\t{\n\t\t\tif (msg.sended) return;\n\n\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)发送\", msg.queue, msg);\n\n\n\n\t\t\tif (this._queues.containKey(msg.queue))\n\t\t\t{\n\t\t\t\tlet queue: FWSData.Queue<FMessage<any>> = this._queues.getItem(msg.queue);\n\t\t\t\tqueue.add(msg);\n\t\t\t\tif (queue.length === 1)\n\t\t\t\t{\n\t\t\t\t\tthis.push(msg);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tFWSMvc.Router().update();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.push(msg);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 从路由的队列中, 将消息推出给每个正在连接的模块\n\t\t * @private\n\t\t * @param {FMessage} msg \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tprivate push(msg: FMessage<any>): void\n\t\t{\n\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)推送\", msg.queue, msg);\n\n\t\t\tlet mods: Array<IFMessageConnection> = this._connections.toArray();\n\t\t\tlet counter: number = 0;\n\t\t\tfor (var i: number = 0; i < mods.length; i++)\n\t\t\t{\n\t\t\t\tlet mod: IFMessageConnection = mods[i];\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tlet isHandled: boolean = mod.onFMessage(msg);\n\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\tif (isHandled)\n\t\t\t\t\t{\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tif (msg.queue && msg.queue.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)处理\", mod);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{}\n\t\t\t}\n\t\t\tif (counter === 0)\n\t\t\t{\n\t\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)自动完成\", msg.queue, msg);\n\t\t\t\tmsg.complete();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 将消息通知标为已经处理完成\n\t\t * @param {FMessage} msg \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic complete(msg: FMessage<any>): void\n\t\t{\n\t\t\tif(this._queues.keys.indexOf(msg.queue)>=0) \n\t\t\t{\n\t\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)完成\", msg.queue, msg);\n\t\t\t}\n\n\t\t\tFWSMvc.Router().update();\n\t\t}\n\n\t\t/**\n\t\t * 循环更新\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic update(): void\n\t\t{\n\t\t\tvar keys: Array<string> = this._queues.keys;\n\t\t\tfor (var i: number = 0; i < keys.length; i++)\n\t\t\t{\n\t\t\t\tvar key: string = keys[i];\n\t\t\t\tvar queue: FWSData.Queue<FMessage<any>> = this._queues.getItem(key);\n\t\t\t\tif (queue.current && queue.current.completed)\n\t\t\t\t{\n\t\t\t\t\tqueue.remove();\n\t\t\t\t\tif (queue.current) Router().push(queue.current);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 获取消息路由实例\n\t * @export\n\t * @returns {FMessageRouter} \n\t */\n\texport function Router(): FMessageRouter\n\t{\n\t\tif (!FMessageRouter._router) \n\t\t{\n\t\t\tFMessageRouter._router = new FMessageRouter();\n\t\t}\n\t\treturn FMessageRouter._router;\n\t}\n\n\t//-------\n\n\texport function createContext(key:string, parentContext:FWSData.Node<IContext> = null, ...mods:IFMessageConnection[]):FWSData.Node<IContext>\n\t{\n\t\tvar ret:FWSData.Node<IContext> = new FWSData.Node<IContext>(key);\n\t\tret.data = new FContext(key);\n\t\t\n\t\tfor(var i:number = 0; i < mods.length; i++)\n\t\t{\n\t\t\tret.data.setModules(mods[i]);\n\t\t}\n\n\t\tif(parentContext)\n\t\t{\n\t\t\tparentContext.add(ret);\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n}\n\n\nexport = FWSMvc;"]}