{"version":3,"sources":["assets/resources/scripts/fws/display/FWSComponent.ts","assets/resources/scripts/fws/data/FWSData.ts","assets/resources/scripts/fws/FWSEnv.ts","assets/resources/scripts/fws/mvc/FWSMvc.ts","assets/resources/scripts/fws/utils/HttpUtils.ts","assets/resources/scripts/game/scene/TestScene.ts","assets/resources/scripts/fws/net/WebClient.ts","assets/resources/scripts/fws/utils/X.ts"],"names":["_a","cc","_decorator","ccclass","FWSMvc","property","require","X","FWSComponent","_super","_this","call","this","mvcDelegate","FMessageConnectionDelegate","__extends","prototype","onEnable","connect","trace","onDisable","disconnect","__decorate","Component","exports","default","FWSData","getValueFromPath","source","path","defaultValue","eval","err","getValueFromMember","member","ret","undefined","setValueFromPath","sourcePath","target","targetPath","targetPathItems","split","temp","i","length","item","lastName","sourceValue","EventArgs","sender","_sender","Object","defineProperty","get","DataPropertyChangeEventArgs","propertyName","newValue","oldValue","_source","_propertyName","_newValue","_oldValue","DataCollectionChangeType","DataDictChangeEventArgs","type","key","_key","_type","DataListChangeEventArgs","index","_index","DataBindMode","DataBindLink","mode","options","_target","_mode","_options","DataBindManager","_links","Array","distEvent","e","cloneList","slice","lk","handler","TwoWay","OneWay","add","link","find","push","findSource","findTarget","getBindSources","getBindTargets","removeLinksBy","splice","removeLinksBySource","removeLinksByTarget","removeAll","onPropertiesChange","twoway","src","tag","srcName","tagName","k","onCollectionCallbackChange","onListChange","Clear","clear","Add","Remove","Modify","onDictChange","getDataBindManager","_isntance","copyProperties","v","copyList","List","at","copyDict","Dict","ks","keys","getItem","setItem","bindProperties","Once","bindCollectionCallback","unbind","unbindBySource","unbindByTarget","DependentProperties","owner","_owner","_properties","name","defValue","hasOwnProperty","set","toJSON","JSON","stringify","fromJSON","json","parse","DependentObject","__DP","data","_dict","getEnumerator","DictEnumerator","clone","deep","value","containKey","deleteKey","indexOf","containValue","values","count","toObject","toString","dict","reset","_keys","_values","moveNext","getCurrent","end","ary","cloneAry","eventEnabled","_list","dump","handle","desc","console","log","itemStr","sort","sortHandler","sync","removeAt","ListEnumerator","modify","addArray","itemArray","remove","insert","toArray","join","separator","list","Queue","QueueEnumrator","shift","queue","_queue","_temp","current","Node","id","_nodes","_id","NodeEnumrator","c","_parentNode","node","removeFromParent","n","cn","findData","d","_data","getParentNodes","parentNode","getParentByOtherNode","p1","p2","n1","n2","firstChild","lastChild","_node","nextNode","Stack","StackEnumrator","pop","stack","_stack","Ring","RingEnumrator","getIndex","offset","Math","abs","ring","_ring","_offset","CompareResult","foreach","iter","module","FWSEnv","PROD","API_BASE_URL","WS_BASE_URL","DEBUG","CC_DEBUG","SIMULATOR","EDITOR","CC_EDITOR","DEBUG_ADVANCED","DEBUG_MVC_TRACE","DEBUG_CONTEXT_TRACE","DEBUG_WEBCLIENT_TRACE","MVC_CONTEXT_TRY_CATCH","FContext","mods","_i","arguments","_mods","initMessageConnections","onEnterContext","mod","messageConnectionActived","warn","onEnterContextMember","error","onLeaveContext","onLeaveContextMember","setModules","FContextManager","_contextManager","_history","init","root","_root","goto","sh","rootNode","_current","theParentNode","closeList","closeContext","found","openList","theParentNodeIsNull","openContext","onContextChanged","gotoID","checkActived","checkActivedById","back","clearHistory","ContextManager","FMessage","_sended","_completed","send","Router","complete","FMessageConnectionAbstract","_messageConnectionActived","onConnect","onDisconnect","onFMessage","msg","handlerName","FMessageRouter","_router","_queues","_connections","createQueue","category","removeQueue","removeAllQueues","getQueue","clearQueueMessages","clearAllQueueMessages","connection","disconnectAll","sended","update","counter","completed","createContext","parentContext","HttpUtils","regexUrl","addParam","encodeURIComponent","getParams","isUrl","uri","toLowerCase","test","URL","baseUrl","_scheme","_host","_port","_path","_query","_anchor","url","substr","ps","exec","parseInt","addQueryParam","addAnchorParam","setQueryParams","setAnchorParams","WebClient","TestScene","start","res","GET_OVERTIME","POST_OVERTIME","uriChecker","time","Date","getTime","postChecker","arr","attr","callbackTarget","successHandler","failHandler","request","XMLHttpRequest","open","timeout","setRequestHeader","onerror","ontimeout","readyState","onreadystatechange","status","post","getData","postData","getString","args","a","executeConsole","api","apply","info","color","group","groupCollapsed","groupEnd","table","timeEnd","window"],"mappings":"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","sourcesContent":["/*\n * 组件脚本\n * @Author: 刘强 \n * @Date: 2018-07-31 16:18:57 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 16:30:33\n */\n\nconst {ccclass, property} = cc._decorator;\nimport FWSMvc = require('../mvc/FWSMvc');\nimport X = require('../utils/X');\n\n\n@ccclass\nexport default class FWSComponent extends cc.Component {\n\n\t/** MVC委托模块 */\n\tprotected mvcDelegate:FWSMvc.FMessageConnectionDelegate;\n\t\n\t/** 构造 */\n\tpublic constructor()\n\t{\n\t\tsuper();\n\t\tthis.mvcDelegate = new FWSMvc.FMessageConnectionDelegate(this);\n\t}\n\n\t/** 组件可用时 */\n\tpublic onEnable():void\n\t{\n\t\tthis.mvcDelegate.connect();\n\n\t\tX.trace(\"onEnable\");\n\t}\n\n\t/** 组件不可用时 */\n\tpublic onDisable():void\n\t{\n\t\tthis.mvcDelegate.disconnect();\n\n\t\tX.trace(\"onDisable\");\n\t}\n}","/*\n * 数据相关的基础功能, 包括支持克隆, 迭代的基本数据结构, 支持数据绑定通知的基本数据模型\n * @Author: 刘强\n * @Date: 2017-03-01 14:19:44 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 15:39:59\n */\n\nmodule FWSData\n{\n\t//----------------------------------------------- 辅助功能\n\n\t/**\n\t * 以路径的方式获取指定成员的值 \n\t * @export\n\t * @param {*} source 对象\n\t * @param {string} path 用点语法分隔key或者索引的字符串表示一个路径, 例如: \"myUser.cards.0\", 相当于source.myUser.cards[0]\n\t * @param {*} [defaultValue] 当路径访问数据内容失败时, 返回的一个默认值\n\t * @returns {*} \n\t */\n\texport function getValueFromPath(source: any, path: string, defaultValue?: any): any\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn eval(\"source\" + path);\n\t\t}\n\t\tcatch (err) { }\n\t\treturn defaultValue;\n\t}\n\n\t/**\n\t * 用成员名称的方式获取指定成员的值\n\t * @export\n\t * @param {*} source 对象\n\t * @param {string} member 成员名称, 例如: \"myUser\", 相当于source.myUser\n\t * @param {*} [defaultValue] 当访问数据内容失败时, 返回的一个默认值\n\t * @returns {*} \n\t */\n\texport function getValueFromMember(source: any, member: string, defaultValue?: any): any\n\t{\n\t\tif (!source) return defaultValue;\n\n\t\tvar ret: any = source[member];\n\t\tif (ret === undefined) ret = defaultValue;\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * 设置目标对象指定路径的成员的值为源对象指定路径的值\n\t * @export\n\t * @param {*} source 数据源对象\n\t * @param {string} sourcePath 数据源成员路径\n\t * @param {*} target 目标对象\n\t * @param {string} targetPath 目标对象成员路径\n\t */\n\texport function setValueFromPath(source: any, sourcePath: string, target: any, targetPath: string): void\n\t{\n\t\tif (!source || !target) return;\n\t\tvar targetPathItems: string[] = targetPath.split(\".\");\n\n\t\tvar temp: any = target;\n\t\tfor (var i: number = 0; i < targetPathItems.length - 1; i++)\n\t\t{\n\t\t\tlet targetPathItem: string = targetPathItems[i];\n\t\t\tlet item: any = temp[targetPathItem];\n\t\t\tif (item === null || item === undefined) return;\n\t\t\ttemp = item;\n\t\t}\n\n\t\tvar lastName: string = targetPathItems[targetPathItems.length - 1];\n\t\tvar sourceValue: any = getValueFromPath(source, sourcePath, null);\n\n\t\tif (sourceValue !== null && sourceValue !== undefined)\n\t\t{\n\t\t\ttemp[lastName] = sourceValue;\n\t\t}\n\t}\n\n\t//----------------------------------------------- 事件通知\n\n\t/**\n\t * 事件参数\n\t * @export\n\t * @class EventArgs\n\t */\n\texport class EventArgs\n\t{\n\t\tprivate _sender: any;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {*} sender 事件发送者\n\t\t * @memberOf EventArgs\n\t\t */\n\t\tconstructor(sender: any)\n\t\t{\n\t\t\tthis._sender = sender;\n\t\t}\n\n\t\t/**\n\t\t * 获取事件发送者\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf EventArgs\n\t\t */\n\t\tpublic get sender(): any\n\t\t{\n\t\t\treturn this._sender;\n\t\t}\n\t}\n\n\t/**\n\t * 数据属性改变事件参数\n\t * @export\n\t * @class DataPropertyChangeEventArgs\n\t * @extends {EventArgs}\n\t */\n\texport class DataPropertyChangeEventArgs extends EventArgs\n\t{\n\t\tprivate _propertyName: string;\n\t\tprivate _source: any;\n\t\tprivate _newValue: any;\n\t\tprivate _oldValue: any;\n\n\t\t/**\n\t\t * Creates an instance of DataPropertyChangeEventArgs.\n\t\t * @param {*} sender \n\t\t * @param {*} source \n\t\t * @param {string} propertyName \n\t\t * @param {*} newValue \n\t\t * @param {*} oldValue \n\t\t * \n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tconstructor(sender: any, source: any, propertyName: string, newValue: any, oldValue: any)\n\t\t{\n\t\t\tsuper(sender);\n\t\t\tthis._source = source;\n\t\t\tthis._propertyName = propertyName;\n\t\t\tthis._newValue = newValue;\n\t\t\tthis._oldValue = oldValue;\n\t\t}\n\n\t\t/**\n\t\t * 获取数据源对象\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get source(): any { return this._source; }\n\n\t\t/**\n\t\t * 获取属性名称\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get propertyName(): string { return this._propertyName; }\n\n\t\t/**\n\t\t * 获取属性的新值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get newValue(): any { return this._newValue; }\n\n\t\t/**\n\t\t * 获取属性的老值\n\t\t * \n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataPropertyChangeEventArgs\n\t\t */\n\t\tpublic get oldValue(): any { return this._oldValue; }\n\t}\n\n\t/**\n\t * 数据字典改变事件类型\n\t * @export\n\t * @enum {number}\n\t */\n\texport enum DataCollectionChangeType\n\t{\n\t\t/**\n\t\t * 清空成员时\n\t\t */\n\t\tClear,\n\t\t/**\n\t\t * 添加成员时\n\t\t */\n\t\tAdd,\n\t\t/**\n\t\t * 移除成员时\n\t\t */\n\t\tRemove,\n\t\t/**\n\t\t * 修改成员时\n\t\t */\n\t\tModify\n\t}\n\n\t/**\n\t * 数据字典改变事件参数\n\t * @export\n\t * @class DataDictChangeEventArgs\n\t * @extends {EventArgs}\n\t */\n\texport class DataDictChangeEventArgs extends EventArgs\n\t{\n\t\tprivate _source: any;\n\t\tprivate _key: string;\n\t\tprivate _oldValue: any;\n\t\tprivate _newValue: any;\n\t\tprivate _type: DataCollectionChangeType;\n\n\t\tconstructor(sender: any, type: DataCollectionChangeType, source: any, key: string, oldValue: any, newValue: any)\n\t\t{\n\t\t\tsuper(sender);\n\n\t\t\tthis._source = source;\n\t\t\tthis._key = key;\n\t\t\tthis._oldValue = oldValue;\n\t\t\tthis._newValue = newValue;\n\t\t\tthis._type = type;\n\t\t}\n\n\t\t/**\n\t\t * 改变方式\n\t\t * @readonly\n\t\t * @type {DataCollectionChangeType}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get type(): DataCollectionChangeType { return this._type; }\n\n\t\t/**\n\t\t * 数据源对象\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get source(): any { return this._source; }\n\n\t\t/**\n\t\t * 老值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get oldValue(): any { return this._oldValue; }\n\n\t\t/**\n\t\t * 新值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get newValue(): any { return this._newValue; }\n\n\t\t/**\n\t\t * 键名\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf DataDictChangeEventArgs\n\t\t */\n\t\tpublic get key(): string { return this._key; }\n\t}\n\n\t/**\n\t * 数据列表改变事件参数\n\t * @export\n\t * @class DataListChangeEventArgs\n\t * @extends {EventArgs}\n\t */\n\texport class DataListChangeEventArgs extends EventArgs\n\t{\n\t\tprivate _source: any;\n\t\tprivate _index: number;\n\t\tprivate _oldValue: any;\n\t\tprivate _newValue: any;\n\t\tprivate _type: DataCollectionChangeType;\n\n\t\t/**\n\t\t * Creates an instance of DataListChangeEventArgs.\n\t\t * @param {*} sender \n\t\t * @param {DataCollectionChangeType} type \n\t\t * @param {*} source \n\t\t * @param {number} index \n\t\t * @param {*} newValue \n\t\t * @param {*} oldValue \n\t\t * \n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tconstructor(sender: any, type: DataCollectionChangeType, source: any, index: number, newValue: any, oldValue: any)\n\t\t{\n\t\t\tsuper(sender);\n\n\t\t\tthis._type = type;\n\t\t\tthis._source = source;\n\t\t\tthis._index = index;\n\t\t\tthis._newValue = newValue;\n\t\t\tthis._oldValue = oldValue;\n\t\t}\n\n\t\t/**\n\t\t * 数据改变方式\n\t\t * @readonly\n\t\t * @type {DataCollectionChangeType}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get type(): DataCollectionChangeType { return this._type; }\n\n\t\t/**\n\t\t * 数据源对象\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get source(): any { return this._source; }\n\n\t\t/**\n\t\t * 索引\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get index(): number { return this._index; }\n\n\t\t/**\n\t\t * 新值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get newValue(): any { return this._newValue; }\n\n\t\t/**\n\t\t * 老值\n\t\t * @readonly\n\t\t * @type {*}\n\t\t * @memberOf DataListChangeEventArgs\n\t\t */\n\t\tpublic get oldValue(): any { return this._oldValue; }\n\t}\n\n\t//----------------------------------------------- 数据绑定信息\n\n\t/**\n\t * 数据绑定模式\n\t * @export\n\t * @enum {number}\n\t */\n\texport enum DataBindMode\n\t{\n\t\t/**\n\t\t * 一次性同步\n\t\t */\n\t\tOnce,\n\t\t/**\n\t\t * 单向更新绑定\n\t\t */\n\t\tOneWay,\n\t\t/**\n\t\t * 双向更新绑定\n\t\t */\n\t\tTwoWay\n\t}\n\n\t/**\n\t * 数据绑定关系\n\t * \n\t * @export\n\t * @class DataBindLink\n\t */\n\texport class DataBindLink\n\t{\n\t\tprivate _source: any;\n\t\tprivate _target: any;\n\t\tprivate _mode: DataBindMode;\n\t\tprivate _options: any;\n\t\tprivate _type: string;\n\n\t\tconstructor(type: string, source: any, target: any, mode: DataBindMode, options?: any)\n\t\t{\n\t\t\tthis._type = type;\n\t\t\tthis._source = source;\n\t\t\tthis._target = target;\n\t\t\tthis._mode = mode;\n\t\t\tthis._options = options;\n\t\t}\n\n\t\tpublic get type(): string { return this._type; }\n\t\tpublic get source(): any { return this._source; }\n\t\tpublic get target(): any { return this._target; }\n\t\tpublic get mode(): any { return this._mode; }\n\t\tpublic get options(): any { return this._options; }\n\t}\n\n\t/**\n\t * 数据绑定接口\n\t * @export\n\t * @interface IDataContext\n\t */\n\texport interface IDataContext\n\t{\n\t\t/**\n\t\t * 数据源对象\n\t\t * @type {*}\n\t\t * @memberOf IDataContext\n\t\t */\n\t\tdataContext: any;\n\t\t/**\n\t\t * 数据源与当前对象的属性对应关系\n\t\t * @type {*}\n\t\t * @memberOf IDataContext\n\t\t */\n\t\tdataContextMap: any;\n\t\t/**\n\t\t * 数据绑定模式\n\t\t * @type {DataBindMode}\n\t\t * @memberOf IDataContext\n\t\t */\n\t\tdataContextBindMode: DataBindMode;\n\t}\n\n\t//----------------------------------------------- 数据绑定管理器\n\n\t/**\n\t * 数据绑定管理器\n\t * @class DataBindManager\n\t */\n\tclass DataBindManager\n\t{\n\t\tstatic _isntance: DataBindManager;\n\n\t\tprivate _links: Array<DataBindLink>;\n\n\t\t/**\n\t\t * Creates an instance of DataBindManager.\n\t\t * \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._links = new Array<DataBindLink>();\n\t\t}\n\n\t\t/**\n\t\t * 通知数据改变事件\n\t\t * @param {EventArgs} e \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic distEvent(e: EventArgs): void\n\t\t{\n\t\t\tvar cloneList: Array<DataBindLink> = this._links.slice(0);\n\n\t\t\tfor (var i: number = 0; i < cloneList.length; i++)\n\t\t\t{\n\t\t\t\tvar lk: DataBindLink = cloneList[i];\n\t\t\t\tvar handler: Function = this[\"on\" + lk.type + \"Change\"];\n\t\t\t\tif (!handler) continue;\n\n\t\t\t\tif (e.sender === lk.source)\n\t\t\t\t{\n\t\t\t\t\tif (lk.mode === DataBindMode.TwoWay\n\t\t\t\t\t\t|| lk.mode === DataBindMode.OneWay)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.call(this, e, lk, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (e.sender === lk.target && lk.mode === DataBindMode.TwoWay)\n\t\t\t\t{\n\t\t\t\t\thandler.call(this, e, lk, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 添加绑定关系\n\t\t * @param {string} type\n\t\t * @param {*} source \n\t\t * @param {*} target \n\t\t * @param {DataBindMode} mode \n\t\t * @param {*} options \n\t\t * @returns {void} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic add(type: string, source: any, target: any, mode: DataBindMode, options: any): void\n\t\t{\n\t\t\tvar link: DataBindLink = this.find(source, target);\n\t\t\tif (link) return;\n\n\t\t\tlink = new DataBindLink(type, source, target, mode, options);\n\t\t\tthis._links.push(link);\n\t\t}\n\n\t\t/**\n\t\t * 查找绑定关系\n\t\t * @param {*} source \n\t\t * @param {*} target \n\t\t * @returns {DataBindLink} \n\t\t * \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic find(source: any, target: any): DataBindLink\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\n\t\t\t\tif (link.source === source && link.target === target) return link;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 查找数据源\n\t\t * @param {*} source \n\t\t * @returns {DataBindLink} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic findSource(source: any): DataBindLink\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source === source) return link;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 查找目标\n\t\t * @param {*} target \n\t\t * @returns {DataBindLink} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic findTarget(target: any): DataBindLink\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.target === target) return link;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取绑定特定目标的数据源\n\t\t * @param {*} target \n\t\t * @returns {Array<DataBindLink>} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic getBindSources(target: any): Array<DataBindLink>\n\t\t{\n\t\t\tvar ret: Array<DataBindLink> = new Array<DataBindLink>();\n\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.target === target)\n\t\t\t\t{\n\t\t\t\t\tret.push(link);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取绑定特定数据源的目标\n\t\t * @param {*} source \n\t\t * @returns {Array<DataBindLink>} \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic getBindTargets(source: any): Array<DataBindLink>\n\t\t{\n\t\t\tvar ret: Array<DataBindLink> = new Array<DataBindLink>();\n\n\t\t\tfor (var i: number = 0; i < this._links.length; i++)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source === source)\n\t\t\t\t{\n\t\t\t\t\tret.push(link);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 移除特定数据源和目标关系的绑定\n\t\t * @param {*} source \n\t\t * @param {*} target \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeLinksBy(source: any, target: any): void\n\t\t{\n\t\t\tfor (var i: number = this._links.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source !== source || link.target !== target) continue;\n\n\t\t\t\tthis._links.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除所有特定数据源的绑定\n\t\t * @param {*} source \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeLinksBySource(source: any): void\n\t\t{\n\t\t\tfor (var i: number = this._links.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.source !== source) continue;\n\t\t\t\tthis._links.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除所有特定目标的绑定\n\t\t * @param {*} target \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeLinksByTarget(target: any): void\n\t\t{\n\t\t\tfor (var i: number = this._links.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tvar link: DataBindLink = this._links[i];\n\t\t\t\tif (link.target !== target) continue;\n\t\t\t\tthis._links.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除所有绑定\n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tpublic removeAll(): void\n\t\t{\n\t\t\tthis._links.splice(0, this._links.length);\n\t\t}\n\n\t\t/**\n\t\t * 对象属性改变\n\t\t * @private\n\t\t * @param {DataPropertyChangeEventArgs} e \n\t\t * @param {DataBindLink} lk\n\t\t * @param {boolean} twoway \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tprivate onPropertiesChange(e: DataPropertyChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tvar src = null;\n\t\t\tvar tag = null;\n\t\t\tvar srcName = \"\";\n\t\t\tvar tagName = \"\";\n\n\t\t\t//options { target: source }\n\t\t\tif (twoway)\n\t\t\t{\n\t\t\t\t//反向\n\t\t\t\tsrc = lk.target;\n\t\t\t\ttag = lk.source;\n\t\t\t\tsrcName = e.propertyName;\n\t\t\t\ttagName = lk.options[srcName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//正向\n\t\t\t\tsrc = lk.source;\n\t\t\t\ttag = lk.target;\n\t\t\t\tsrcName = e.propertyName;\n\t\t\t\tfor (var k in lk.options)\n\t\t\t\t{\n\t\t\t\t\tvar v = lk.options[k];\n\t\t\t\t\tif (v === srcName)\n\t\t\t\t\t{\n\t\t\t\t\t\ttagName = k;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!srcName || !tagName) return;\n\t\t\ttag[tagName] = src[srcName];\n\n\t\t}\n\n\t\t/**\n\t\t * 集合数据回调事件\n\t\t * @private\n\t\t * @param {DataListChangeEventArgs} e \n\t\t * @param {DataBindLink} lk \n\t\t * @param {boolean} twoway \n\t\t * @memberof DataBindManager\n\t\t */\n\t\tprivate onCollectionCallbackChange(e: DataListChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tif (typeof (lk.options) === \"function\")\n\t\t\t{\n\t\t\t\tif (lk.target)\n\t\t\t\t{\n\t\t\t\t\tvar fun: Function = lk.options;\n\t\t\t\t\tfun.call(lk.target, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 列表成员改变\n\t\t * @private\n\t\t * @param {DataListChangeEventArgs} e \n\t\t * @param {DataBindLink} lk\n\t\t * @param {boolean} twoway \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tprivate onListChange(e: DataListChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tif (!lk.source || !lk.target) return;\n\n\t\t\tswitch (e.type)\n\t\t\t{\n\t\t\t\tcase FWSData.DataCollectionChangeType.Clear:\n\t\t\t\t\t{\n\t\t\t\t\t\tif (twoway)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlk.source.clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Add:\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Remove:\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Modify:\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 字典成员改变\n\t\t * @private\n\t\t * @param {DataDictChangeEventArgs} e \n\t\t * @param {DataBindLink} lk\n\t\t * @param {boolean} twoway \n\t\t * @memberOf DataBindManager\n\t\t */\n\t\tprivate onDictChange(e: DataDictChangeEventArgs, lk: DataBindLink, twoway: boolean): void\n\t\t{\n\t\t\tswitch (e.type)\n\t\t\t{\n\t\t\t\tcase FWSData.DataCollectionChangeType.Clear:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Add:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Remove:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FWSData.DataCollectionChangeType.Modify:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 获取数据绑定管理器实例\n\t * @returns {DataBindManager} \n\t */\n\tfunction getDataBindManager(): DataBindManager\n\t{\n\t\tif (!DataBindManager._isntance)\n\t\t{\n\t\t\tDataBindManager._isntance = new DataBindManager();\n\t\t}\n\t\treturn DataBindManager._isntance;\n\t}\n\n\t//----------------------------------------------- 数据拷贝方法\n\n\t/**\n\t * 拷贝属性值\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} [options] \n\t */\n\texport function copyProperties(source: any, target: any, options?: any): void\n\t{\n\t\tif (!options) return;\n\n\t\tif (source === null) return;\n\t\tif (source === undefined) return;\n\t\tif (target === null) return;\n\t\tif (target === undefined) return;\n\n\t\tfor (var k in options)\n\t\t{\n\t\t\tvar v = options[k];\n\n\t\t\t// var v1: any = target[k];\n\t\t\t// var v2: any = source[v];\n\n\t\t\t// console.log(\"(DataBind) copyProperties \" + k + \" = \" + v);\n\n\t\t\t// v1 = (v1 === null || v1 === undefined) ? \"NULL\" : v1;\n\t\t\t// v2 = (v2 === null || v2 === undefined) ? \"NULL\" : v2;\n\t\t\t// console.log(\"(DataBind) 1 # copyProperties(value) target = \" + v1 + \", source = \" + v2);\n\n\t\t\ttarget[k] = source[v];\n\n\t\t\t// v1 = target[k];\n\t\t\t// v2 = source[v];\n\n\t\t\t// v1 = (v1 === null || v1 === undefined) ? \"NULL\" : v1;\n\t\t\t// v2 = (v2 === null || v2 === undefined) ? \"NULL\" : v2;\n\t\t\t// console.log(\"(DataBind) 2 # copyProperties(value) target = \" + v1 + \", source = \" + v2);\n\t\t}\n\t}\n\n\t/**\n\t * 拷贝列表成员\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} [options] \n\t */\n\texport function copyList(source: any, target: any, options?: any): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (source instanceof List) { } else return;\n\t\tif (target instanceof List) { } else return;\n\n\t\ttarget.clear();\n\t\tfor (var i = 0; i < source.length; i++)\n\t\t{\n\t\t\ttarget.add(source.at(i));\n\t\t}\n\t}\n\n\t/**\n\t * 拷贝字典成员\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} [options] \n\t */\n\texport function copyDict(source: any, target: any, options?: any): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (source instanceof Dict) { } else return;\n\t\tif (target instanceof Dict) { } else return;\n\n\t\tvar ks: Array<string> = source.keys;\n\t\tfor (var i: number = 0; i < ks.length; i++)\n\t\t{\n\t\t\tvar k = ks[i];\n\t\t\tvar v = source.getItem(k);\n\t\t\ttarget.setItem(k, v);\n\t\t}\n\t}\n\n\t//----------------------------------------------- 数据绑定方法\n\n\t/**\n\t * 建立数据属性绑定\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {DataBindMode} mode \n\t * @param {*} options \n\t */\n\texport function bindProperties(source: any, target: any, mode: DataBindMode, options?: any): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (mode !== DataBindMode.Once)\n\t\t{\n\t\t\tgetDataBindManager().add(\"Properties\", source, target, mode, options);\n\t\t}\n\t\tcopyProperties(source, target, options);\n\t}\n\n\t/**\n\t * 绑定集合\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t * @param {*} Function \n\t */\n\texport function bindCollectionCallback(source: any, target: any, options: Function): void\n\t{\n\t\tif (source && target && source !== target) { } else return;\n\t\tif (typeof (options) !== \"function\") return;\n\t\tgetDataBindManager().add(\"CollectionCallback\", source, target, DataBindMode.OneWay, options);\n\t}\n\n\t/**\n\t * 解除特定数据源和目标的数据绑定\n\t * @export\n\t * @param {*} source \n\t * @param {*} target \n\t */\n\texport function unbind(source: any, target: any): void\n\t{\n\t\tgetDataBindManager().removeLinksBy(source, target);\n\t}\n\n\t/**\n\t * 解除数据源的数据绑定\n\t * @export\n\t * @param {*} source \n\t */\n\texport function unbindBySource(source: any): void\n\t{\n\t\tgetDataBindManager().removeLinksBySource(source);\n\t}\n\n\t/**\n\t * 解除目标对象的数据绑定\n\t * @export\n\t * @param {*} target \n\t */\n\texport function unbindByTarget(target: any): void\n\t{\n\t\tgetDataBindManager().removeLinksByTarget(target);\n\t}\n\n\t//----------------------------------------------- 依赖关系\n\n\t/**\n\t * 依赖属性 (提供属性值绑定的数据源的主要实现方法)\n\t * @export\n\t * @class DependentProperties\n\t */\n\texport class DependentProperties\n\t{\n\n\t\tprivate _owner: any;\n\t\tprivate _properties: Object;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {*} owner \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tconstructor(owner: any)\n\t\t{\n\t\t\tthis._owner = owner;\n\t\t\tthis._properties = new Object();\n\t\t}\n\n\t\t/**\n\t\t * 获取属性值\n\t\t * @param {string} name \n\t\t * @param {*} [defValue] \n\t\t * @returns {*} \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic get(name: string, defValue?: any): any\n\t\t{\n\t\t\tif (this._properties.hasOwnProperty(name))\n\t\t\t{\n\t\t\t\treturn this._properties[name];\n\t\t\t}\n\t\t\treturn defValue;\n\t\t}\n\n\t\t/**\n\t\t * 设置属性值\n\t\t * @param {string} name \n\t\t * @param {*} newValue \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic set(name: string, newValue: any): boolean\n\t\t{\n\t\t\tif (this._properties[name] === newValue) return false;\n\t\t\tvar oldValue: any = this._properties[name];\n\t\t\tthis._properties[name] = newValue;\n\t\t\tgetDataBindManager().distEvent(new DataPropertyChangeEventArgs(this._owner, this._owner, name, newValue, oldValue));\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * 清空内容\n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tfor (var k in this._properties)\n\t\t\t{\n\t\t\t\tdelete this._properties[k];\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 生成json字串\n\t\t */\n\t\tpublic toJSON(): string\n\t\t{\n\t\t\treturn JSON.stringify(this._properties);\n\t\t}\n\n\t\t/**\n\t\t * 从json字串读取内容\n\t\t * @param {string} json \n\t\t * @memberOf DependentProperties\n\t\t */\n\t\tpublic fromJSON(json: string): void\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis._properties = JSON.parse(json);\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 依赖对象 (用于数据绑定的数据对象的抽象类)\n\t * @export\n\t * @class DependentObject\n\t */\n\texport class DependentObject\n\t{\n\t\tprivate __DP: DependentProperties;\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf DependentObject\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis.__DP = new DependentProperties(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取属性值\n\t\t * @private\n\t\t * @param {string} name \n\t\t * @param {*} [defValue] \n\t\t * @returns {*} \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic get(name: string, defValue?: any): any\n\t\t{\n\t\t\treturn this.__DP.get(name, defValue);\n\t\t}\n\n\t\t/**\n\t\t * 设置属性值\n\t\t * @param {string} name \n\t\t * @param {*} newValue \n\t\t * \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic set(name: string, newValue: any): boolean\n\t\t{\n\t\t\treturn this.__DP.set(name, newValue);\n\t\t}\n\n\t\t/**\n\t\t * 清空属性值\n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tthis.__DP.clear();\n\t\t}\n\n\t\t/**\n\t\t * 生成json字串\n\t\t * @returns {string} \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic toJSON(): string\n\t\t{\n\t\t\treturn this.__DP.toJSON();\n\t\t}\n\n\t\t/**\n\t\t * 从json字串读取内容\n\t\t * @param {string} json \n\t\t * @memberOf DependentObject\n\t\t */\n\t\tpublic fromJSON(json: string): void\n\t\t{\n\t\t\tthis.__DP.fromJSON(json);\n\t\t}\n\n\t}\n\n\t//----------------------------------------------- 接口标准\n\n\t/**\n\t * 统一的迭代器接口\n\t * @export\n\t * @interface IEnumerator\n\t */\n\texport interface IEnumerator\n\t{\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf IEnumerator\n\t\t */\n\t\treset(): void;\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf IEnumerator\n\t\t */\n\t\tgetCurrent(): any;\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf IEnumerator\n\t\t */\n\t\tmoveNext(): void;\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf IEnumerator\n\t\t */\n\t\tend(): boolean;\n\t}\n\n\t/**\n\t * 克隆接口 (目前基本上只支持浅克隆)\n\t * @export\n\t * @interface ICloneable\n\t */\n\texport interface ICloneable\n\t{\n\t\tclone(deep?: boolean): any;\n\t}\n\n\t/**\n\t * 统一的可迭代的访问接口\n\t * @export\n\t * @interface IEnumerable\n\t */\n\texport interface IEnumerable\n\t{\n\t\t/**\n\t\t * 获取一个迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf IEnumerable\n\t\t */\n\t\tgetEnumerator(): IEnumerator;\n\t}\n\n\t//----------------------------------------------- 数据结构和迭代器\n\n\t/**\n\t * 字典, 也就是通常的KV结构\n\t * @export\n\t * @class Dict\n\t * @template T \n\t */\n\texport class Dict<T> implements IEnumerable, ICloneable\n\t{\n\t\tprivate _dict: any;\n\n\t\t/**\n\t\t * 构造\n\t\t */\n\t\tconstructor(data: Object = null)\n\t\t{\n\t\t\tthis._dict = new Object();\n\n\t\t\tif (data)\n\t\t\t{\n\t\t\t\tfor (var k in data)\n\t\t\t\t{\n\t\t\t\t\tvar v = data[k];\n\t\t\t\t\tthis._dict[k] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Dict\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new DictEnumerator(this);\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * \n\t\t * @memberOf Dict\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Dict<T> = new Dict<T>();\n\n\t\t\tvar ks: Array<string> = this.keys;\n\t\t\tfor (var k in ks)\n\t\t\t{\n\t\t\t\tlet v = this.getItem[k];\n\t\t\t\tret.setItem(k, v);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取指定键的值\n\t\t * @param key 键\n\t\t */\n\t\tpublic getItem(key: string): T\n\t\t{\n\t\t\treturn this._dict[key];\n\t\t}\n\n\t\t/**\n\t\t * 设置指定键的值\n\t\t * @param key 键\n\t\t * @param value 值\n\t\t */\n\t\tpublic setItem(key: string, value: T): void\n\t\t{\n\t\t\tif (this._dict[key] === value) return;\n\n\t\t\tif (this.containKey(key))\n\t\t\t{\n\t\t\t\tvar oldValue: T = this._dict[key];\n\t\t\t\tthis._dict[key] = value;\n\t\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Modify, this, key, oldValue, value));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._dict[key] = value;\n\t\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Add, this, key, oldValue, value));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 删除指定键以及值\n\t\t * @param key 键\n\t\t */\n\t\tpublic deleteKey(key: string): void\n\t\t{\n\t\t\tif (!this.containKey(key)) return;\n\n\t\t\tvar ret = this._dict[key];\n\t\t\tdelete this._dict[key];\n\n\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Remove, this, key, ret, null));\n\t\t}\n\n\t\t/**\n\t\t * 判定是否包含指定的键\n\t\t * @param key 键\n\t\t */\n\t\tpublic containKey(key: string): boolean\n\t\t{\n\t\t\t// console.log(\"[TS]FWSData.Dict.containKey() \", key);\n\t\t\t// var keys: string[] = this.keys;\n\t\t\t// for (var i: number = 0; i < keys.length; i++)\n\t\t\t// {\n\t\t\t// \tconsole.log(\"[TS]FWSData.Dict.containKey.keys() \", i, keys[i]);\n\t\t\t// }\n\t\t\treturn this.keys.indexOf(key) >= 0;\n\t\t}\n\n\t\t/**\n\t\t * 判定是否包含指定的值\n\t\t * @param value 值\n\t\t */\n\t\tpublic containValue(value: T): boolean\n\t\t{\n\t\t\treturn this.values.indexOf(value) >= 0;\n\t\t}\n\n\t\t/**\n\t\t * 清空所有内容\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tif (this.count == 0) return;\n\t\t\tfor (var key in this._dict)\n\t\t\t{\n\t\t\t\tdelete this._dict[key];\n\t\t\t}\n\n\t\t\tgetDataBindManager().distEvent(new DataDictChangeEventArgs(this, DataCollectionChangeType.Clear, this, null, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通对象\n\t\t */\n\t\tpublic toObject(): Object\n\t\t{\n\t\t\tvar ret = new Object();\n\t\t\tfor (var k in this._dict)\n\t\t\t{\n\t\t\t\tvar v = this._dict[k];\n\t\t\t\tret[k] = v;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 转换成字符串信息\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"Dict \" + JSON.stringify(this._dict);\n\t\t}\n\n\t\t/**\n\t\t * 获取所有的键名称\n\t\t */\n\t\tpublic get keys(): Array<string>\n\t\t{\n\t\t\tvar ret: Array<string> = new Array<string>();\n\t\t\tfor (var key in this._dict)\n\t\t\t{\n\t\t\t\tret.push(key);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取所有的值\n\t\t */\n\t\tpublic get values(): Array<T>\n\t\t{\n\t\t\tvar ret: Array<T> = new Array<T>();\n\t\t\tfor (var key in this._dict)\n\t\t\t{\n\t\t\t\tret.push(this._dict[key]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取包含的数据数量\n\t\t */\n\t\tpublic get count(): number\n\t\t{\n\t\t\treturn this.keys.length;\n\t\t}\n\t}\n\n\t/**\n\t * 字典迭代器\n\t * @export\n\t * @class DictEnumerator\n\t * @implements {IEnumerator}\n\t */\n\texport class DictEnumerator implements IEnumerator\n\t{\n\t\tprivate _dict: Dict<any>;\n\t\tprivate _keys: Array<string>;\n\t\tprivate _values: Array<any>;\n\t\tprivate _index: number;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Dict<any>} dict \n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tconstructor(dict: Dict<any>)\n\t\t{\n\t\t\tthis._dict = dict;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._keys = this._dict.keys;\n\t\t\tthis._values = this._dict.values;\n\t\t\tthis._index = 0;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index++;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._values[this._index];\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf DictEnumerator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\tif (this._dict && this._values && this._index >= 0 && this._index < this._values.length)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\n\texport interface IDumpHandler\n\t{\n\t\t(item: any): string\n\t}\n\n\t/**\n\t * 支持数据变动通知的列表数据结构, 建议用它替代Array来处理客户端的常见数组需求, 需要涉及增删改的数据逻辑, 以及界面逻辑或者以后的界面组件\n\t * @export\n\t * @class List\n\t * @template T 成员的类型\n\t */\n\texport class List<T> implements IEnumerable, ICloneable\n\t{\n\t\tprivate _list: Array<T>;\n\t\t/**\n\t\t * 构造\n\t\t */\n\t\tconstructor(ary: T[] = null, cloneAry: boolean = false)\n\t\t{\n\t\t\tif (ary !== null && ary !== undefined)\n\t\t\t{\n\t\t\t\tif (cloneAry)\n\t\t\t\t{\n\t\t\t\t\tthis._list = ary.slice(0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis._list = ary;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._list = new Array<T>();\n\t\t\t}\n\t\t}\n\n\t\tpublic dump(handle: IDumpHandler, desc: string = \"\"): void\n\t\t{\n\t\t\tif (!handle) return;\n\n\t\t\tif (desc)\n\t\t\t{\n\t\t\t\tconsole.log(\"-- \" + desc + \" --\");\n\t\t\t}\n\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tvar item: any = this._list[i];\n\t\t\t\tvar itemStr: string = handle(item);\n\t\t\t\tif (itemStr === null || itemStr === undefined) itemStr = \"\";\n\t\t\t\tconsole.log(\"list::dump\", i, itemStr);\n\t\t\t}\n\t\t}\n\n\t\t/** 排序 */\n\t\tpublic sort(sortHandler: CompareMethod): void\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis._list.sort(sortHandler);\n\t\t\t}\n\t\t\tcatch (err) { }\n\t\t}\n\n\t\t/**\n\t\t * 克隆一个新的列表对象, 并且包含相同的成员\n\t\t * @param {boolean} [deep] 是否使用深度克隆 (暂时没有实现深度克隆)\n\t\t * @returns {*} \n\t\t * @memberOf List\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: List<T> = new List<T>();\n\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.add(this._list[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 同步至数组的内容\n\t\t * @param {Array<T>} ary \n\t\t * @memberOf List\n\t\t */\n\t\tpublic sync(ary: Array<T>): void\n\t\t{\n\t\t\tif (ary === null) return;\n\t\t\tif (ary === undefined) return;\n\n\t\t\tfor (var i: number = this._list.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tlet item: T = this._list[i];\n\t\t\t\tif (ary.indexOf(item) < 0) this.removeAt(i);\n\t\t\t}\n\n\t\t\tfor (var i: number = 0; i < ary.length; i++)\n\t\t\t{\n\t\t\t\tlet item: T = ary[i];\n\t\t\t\tif (this._list.indexOf(item) < 0) this.add(item);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf List\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new ListEnumerator(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引的项目\n\t\t * @param index 索引\n\t\t */\n\t\tpublic at(index: number): T\n\t\t{\n\t\t\tif (index >= 0 && index < this._list.length)\n\t\t\t{\n\t\t\t\treturn this._list[index];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 设置指定索引的项目\n\t\t * @param {T} item 项目\n\t\t * @param {number} index 索引\n\t\t * @memberOf List\n\t\t */\n\t\tpublic modify(item: T, index: number): void\n\t\t{\n\t\t\tif (index < 0 || index >= this._list.length) return;\n\t\t\tif (this._list[index] === item) return;\n\t\t\tvar oldValue: T = this._list[index];\n\t\t\tthis._list[index] = item;\n\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Modify, this, index, item, oldValue));\n\t\t}\n\n\t\t/**\n\t\t * 添加项目\n\t\t * @param item 项目\n\t\t */\n\t\tpublic add(item: T): T\n\t\t{\n\t\t\tthis._list.push(item);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, this._list.length - 1, item, null));\n\t\t\treturn item;\n\t\t}\n\n\t\t/** 添加一个数组的所有成员 */\n\t\tpublic addArray(itemArray: T[]): number\n\t\t{\n\t\t\tfor (var i: number = 0; i < itemArray.length; i++)\n\t\t\t{\n\t\t\t\tthis.add(itemArray[i]);\n\t\t\t}\n\t\t\treturn itemArray.length;\n\t\t}\n\n\t\t/**\n\t\t * 移除项目\n\t\t * @param item 项目\n\t\t */\n\t\tpublic remove(item: T): T\n\t\t{\n\t\t\tvar i = this._list.indexOf(item);\n\t\t\tif (i < 0) return;\n\t\t\tthis._list.splice(i, 1);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, i, null, item));\n\t\t\treturn item;\n\t\t}\n\n\t\t/**\n\t\t * 插入项目\n\t\t * @param item 项目\n\t\t * @param index 索引\n\t\t */\n\t\tpublic insert(item: T, index: number): T\n\t\t{\n\t\t\tif (this._list.length > 0)\n\t\t\t{\n\t\t\t\tif (index < 0 || index > this._list.length - 1) return;\n\t\t\t\tthis._list.splice(index, 0, item);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex = this._list.length;\n\t\t\t\tthis._list.push(item);\n\t\t\t}\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, index, item, null));\n\t\t\treturn item;\n\t\t}\n\n\t\t/**\n\t\t * 移除指定索引的项目\n\t\t * @param index 索引\n\t\t */\n\t\tpublic removeAt(index: number): T\n\t\t{\n\t\t\tvar ret = this._list[index];\n\t\t\tthis._list.splice(index, 1);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, index, null, ret));\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空所有项目\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tif (this._list.length == 0) return;\n\t\t\tthis._list.splice(0, this._list.length);\n\t\t\tif (this.eventEnabled) getDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Clear, this, 0, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 查找项目\n\t\t * @param item 目标项目\n\t\t */\n\t\tpublic indexOf(item: T): number\n\t\t{\n\t\t\treturn this._list.indexOf(item);\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通数组\n\t\t */\n\t\tpublic toArray(): Array<T>\n\t\t{\n\t\t\treturn this._list.slice(0);\n\t\t}\n\n\t\t/**\n\t\t * 转换成字符串信息\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"List [\" + this._list.toString() + \"]\";\n\t\t}\n\n\t\t/**\n\t\t * 使用分隔符将所有成员拼成一个字符串\n\t\t */\n\t\tpublic join(separator: string): string\n\t\t{\n\t\t\treturn this._list.join(separator);\n\t\t}\n\n\t\t/**\n\t\t * 获取长度\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t\t/**\n\t\t * 是否开启事件通知\n\t\t * @type {boolean}\n\t\t * @memberOf List\n\t\t */\n\t\tpublic eventEnabled: boolean = false;\n\t}\n\n\t/**\n\t * 列表迭代器\n\t * @export\n\t * @class ListEnumerator\n\t * @implements {IEnumerator}\n\t */\n\texport class ListEnumerator implements IEnumerator\n\t{\n\t\tprivate _list: List<any>;\n\t\tprivate _index: number;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {List<any>} list \n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tconstructor(list: List<any>)\n\t\t{\n\t\t\tthis._list = list;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._index = 0;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index++;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._list.at(this._index);\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf ListEnumerator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\tif (this._list && this._index >= 0 && this._index < this._list.length)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * 队列\n\t * @export\n\t * @class Queue\n\t * @template T \n\t */\n\texport class Queue<T> implements IEnumerable, ICloneable\n\t{\n\n\t\tprivate _list: Array<T>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf Queue\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._list = new Array<T>();\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Queue<T> = new Queue<T>();\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.add(this._list[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new QueueEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 添加一个成员到队列尾部\n\t\t * @param {T} item \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic add(item: T): void\n\t\t{\n\t\t\tthis._list.push(item);\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, this.length - 1, item, null));\n\t\t}\n\n\t\t/**\n\t\t * 从队列头部移除一个成员\n\t\t * @returns {T} \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic remove(): T\n\t\t{\n\t\t\tvar ret: T = null;\n\t\t\tif (this._list.length > 0) ret = this._list.shift(); else return null;\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, 0, ret, null));\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空整个队列\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tthis._list.splice(0, this._list.length);\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Clear, this, 0, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通数组\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic toArray(): Array<any>\n\t\t{\n\t\t\treturn this._list.slice(0);\n\t\t}\n\n\t\t/**\n\t\t * 转换成文本信息\n\t\t * @returns {string} \n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"Queue[\" + this._list.toString() + \"]\";\n\t\t}\n\n\t\t/**\n\t\t * 返回队列成员数量\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t\t/**\n\t\t * 返回队列头部的成员\n\t\t * @readonly\n\t\t * @type {T}\n\t\t * @memberOf Queue\n\t\t */\n\t\tpublic get current(): T\n\t\t{\n\t\t\tif (this._list.length == 0) return null;\n\t\t\treturn this._list[0];\n\t\t}\n\t}\n\n\t/**\n\t * 队列迭代器\n\t * @export\n\t * @class QueueEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class QueueEnumrator implements IEnumerator\n\t{\n\t\tprivate _queue: Queue<any>;\n\t\tprivate _temp: Queue<any>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Queue<any>} queue \n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tconstructor(queue: Queue<any>)\n\t\t{\n\t\t\tthis._queue = queue;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置\n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._temp = this._queue.clone();\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._temp.remove();\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._temp.current;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * \n\t\t * @memberOf QueueEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\treturn !(this._temp && this._temp.length >= 1);\n\t\t}\n\t}\n\n\t/**\n\t * 树形节点\n\t * @export\n\t * @class Node\n\t * @template T \n\t */\n\texport class Node<T> implements IEnumerable, ICloneable\n\t{\n\t\tprivate _id: string;\n\t\tprivate _nodes: List<Node<T>>;\n\t\tprivate _parentNode: Node<T>;\n\t\tprivate _data: T;\n\n\t\t/**\n\t\t * Creates an instance of Node.\n\t\t * @memberOf Node\n\t\t */\n\t\tconstructor(id: string)\n\t\t{\n\t\t\tthis._nodes = new List<Node<T>>();\n\t\t\tthis._id = id;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new NodeEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 克隆节点\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Node<T> = new Node<T>(this._id);\n\n\t\t\tfor (var i: number = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tvar c: Node<T> = this._nodes.at(i);\n\t\t\t\tif (deep) c = c.clone(deep);\n\t\t\t\tret.add(c);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空所有子节点\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tfor (var i = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tvar node: Node<T> = this._nodes[i];\n\t\t\t\tnode._parentNode = null;\n\t\t\t}\n\t\t\tthis._nodes.clear();\n\t\t}\n\n\t\t/**\n\t\t * 添加一个子节点\n\t\t * @param {Node<T>} node \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic add(node: Node<T>): Node<T>\n\t\t{\n\t\t\tnode._parentNode = this;\n\t\t\treturn this._nodes.add(node);\n\t\t}\n\n\t\t/**\n\t\t * 插入一个子节点\n\t\t * @param {Node<T>} node \n\t\t * @param {number} index \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic insert(node: Node<T>, index: number): Node<T>\n\t\t{\n\t\t\tvar ret: Node<T> = node;\n\t\t\tnode._parentNode = this;\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 移除子节点\n\t\t * @param {Node<T>} node \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic remove(node: Node<T>): Node<T>\n\t\t{\n\t\t\tnode._parentNode = null;\n\t\t\treturn this._nodes.remove(node);\n\t\t}\n\n\t\t/**\n\t\t * 移除指定索引的子节点\n\t\t * @param {number} index \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic removeAt(index: number): Node<T>\n\t\t{\n\t\t\tvar ret = this._nodes.at(index);\n\t\t\tthis._nodes.removeAt(index);\n\t\t\tret._parentNode = null;\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 从节点的父级移除\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic removeFromParent(): void\n\t\t{\n\t\t\tif (this._parentNode)\n\t\t\t{\n\t\t\t\tthis._parentNode.remove(this);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引的子节点\n\t\t * @param {number} index \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic at(index: number): Node<T>\n\t\t{\n\t\t\tvar ret = this._nodes.at(index);\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 搜索特定子节点的索引\n\t\t * @param {Node<T>} node \n\t\t * @returns {number} \n\t\t * \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic indexOf(node: Node<T>): number\n\t\t{\n\t\t\treturn this._nodes.indexOf(node);\n\t\t}\n\n\t\t/**\n\t\t * 查找到定ID的节点\n\t\t * @param {string} id \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic find(id: string): Node<T>\n\t\t{\n\t\t\tif (this._id === id) return this;\n\t\t\tfor (var i: number = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tlet n: Node<T> = this._nodes.at(i);\n\t\t\t\tif (n.id === id) return n;\n\t\t\t\tlet cn: Node<T> = n.find(id);\n\t\t\t\tif (cn) return cn;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 查找指定数据的节点\n\t\t * @param {T} d \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic findData(d: T): Node<T>\n\t\t{\n\t\t\tif (this._data === d) return this;\n\t\t\tfor (var i: number = 0; i < this._nodes.length; i++)\n\t\t\t{\n\t\t\t\tlet n: Node<T> = this._nodes.at(i);\n\t\t\t\tif (n.data === d) return n;\n\t\t\t\tlet cn: Node<T> = n.findData(d);\n\t\t\t\tif (cn) return cn;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取节点到根的逐级节点\n\t\t * @returns {Array<Node<T>>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic getParentNodes(): Array<Node<T>>\n\t\t{\n\t\t\tvar ret: Array<Node<T>> = new Array<Node<T>>();\n\t\t\tvar temp: Node<T> = this;\n\t\t\twhile (temp)\n\t\t\t{\n\t\t\t\tret.splice(0, 0, temp);\n\t\t\t\ttemp = temp.parentNode;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取与另一个节点的共同父级节点\n\t\t * @param {Node<T>} node \n\t\t * @returns {Node<T>} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic getParentByOtherNode(node: Node<T>): Node<T>\n\t\t{\n\t\t\tvar p1: Array<Node<T>> = this.getParentNodes();\n\t\t\tvar p2: Array<Node<T>> = node.getParentNodes();\n\n\t\t\tvar ret: Node<T> = null;\n\n\t\t\tfor (var i: number = 0; i < p1.length; i++)\n\t\t\t{\n\t\t\t\tvar n1: Node<T> = p1[i];\n\t\t\t\tvar n2: Node<T> = null;\n\n\t\t\t\tif (i < p2.length)\n\t\t\t\t{\n\t\t\t\t\tn2 = p2[i];\n\t\t\t\t}\n\n\t\t\t\tif (n1 === n2) ret = n1;\n\t\t\t\telse break;\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t//---------------------- refs\n\n\t\t/**\n\t\t * 获取第一个子节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get firstChild(): Node<T>\n\t\t{\n\t\t\tif (this._nodes.length > 0)\n\t\t\t{\n\t\t\t\treturn this._nodes.at(0);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取最后一个子节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get lastChild(): Node<T>\n\t\t{\n\t\t\tif (this._nodes.length > 0)\n\t\t\t{\n\t\t\t\treturn this._nodes.at(this._nodes.length - 1);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取第一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get firstNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode) return this._parentNode.firstChild;\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取上一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get prevNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode)\n\t\t\t{\n\t\t\t\tvar i: number = this._parentNode.indexOf(this);\n\t\t\t\tif (i > 0) return this._parentNode.at(i - 1);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取下一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get nextNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode)\n\t\t\t{\n\t\t\t\tvar i = this._parentNode.indexOf(this);\n\t\t\t\tif (i >= this._parentNode.length) return null;\n\t\t\t\tif (i < 0) return null;\n\n\t\t\t\treturn this._parentNode.at(i + 1);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取最后一个同级节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get lastNode(): Node<T>\n\t\t{\n\t\t\tif (this._parentNode) return this._parentNode.lastChild;\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取数据\n\t\t * @type {T}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get data(): T\n\t\t{\n\t\t\treturn this._data;\n\t\t}\n\t\t/**\n\t\t * 设置数据\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic set data(value: T)\n\t\t{\n\t\t\tthis._data = value;\n\t\t}\n\n\t\t/**\n\t\t * 获取字符串信息\n\t\t * @returns {string} \n\t\t * @memberOf Node\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\tvar temp: any = this._data;\n\t\t\tif (temp || temp === 0 || temp === false)\n\t\t\t{\n\t\t\t\treturn \"Node \" + JSON.stringify(this._data);\n\t\t\t}\n\t\t\telse return \"Node {}\";\n\t\t}\n\n\t\t//---------------------- properties\n\n\t\t/**\n\t\t * 获取子节点的数量\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._nodes.length;\n\t\t}\n\n\t\t/**\n\t\t * 获取父级节点实例\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get parentNode(): Node<T>\n\t\t{\n\t\t\treturn this._parentNode;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前节点的ID\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get id(): string\n\t\t{\n\t\t\treturn this._id;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前节点的深度级别\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get level(): number\n\t\t{\n\t\t\tvar ret: number = 0;\n\t\t\tvar temp: Node<T> = this;\n\t\t\twhile (temp.parentNode)\n\t\t\t{\n\t\t\t\ttemp = temp.parentNode;\n\t\t\t\tret++;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取根节点\n\t\t * @readonly\n\t\t * @type {Node<T>}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get rootNode(): Node<T>\n\t\t{\n\t\t\tvar ret: Node<T> = this;\n\t\t\twhile (ret.parentNode)\n\t\t\t{\n\t\t\t\tret = ret.parentNode;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取节点路径\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf Node\n\t\t */\n\t\tpublic get path(): string\n\t\t{\n\t\t\tvar ary = new Array<string>();\n\n\t\t\tvar n: Node<T> = this;\n\t\t\twhile (n)\n\t\t\t{\n\t\t\t\tary.splice(0, 0, n.id);\n\t\t\t\tn = n.parentNode;\n\t\t\t}\n\n\t\t\treturn ary.join(\"/\");\n\t\t}\n\t}\n\n\t/**\n\t * 树形节点迭代器\n\t * @export\n\t * @class NodeEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class NodeEnumrator implements IEnumerator\n\t{\n\t\tprivate _node: Node<any>;\n\t\tprivate _temp: Node<any>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Node<any>} node \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tconstructor(node: Node<any>)\n\t\t{\n\t\t\tthis._node = node;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._temp = this._node;//.clone();\n\t\t}\n\n\t\t/**\n\t\t * 下一个\n\t\t * @returns {void} \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tif (this._temp.firstChild && this._temp.firstChild !== this._temp)\n\t\t\t{\n\t\t\t\tthis._temp = this._temp.firstChild;\n\t\t\t}\n\t\t\telse if (this._temp.nextNode && this._temp.nextNode !== this._temp)\n\t\t\t{\n\t\t\t\tthis._temp = this._temp.nextNode;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (this._temp.parentNode)\n\t\t\t\t{\n\t\t\t\t\tthis._temp = this._temp.parentNode;\n\n\t\t\t\t\tif (this._temp === this._node)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._temp = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._temp.nextNode !== this._temp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._temp = this._temp.nextNode;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._temp = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项目\n\t\t * @returns {*} \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._temp;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf NodeEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\treturn !this._temp;\n\t\t}\n\t}\n\n\n\t/**\n\t * 栈\n\t */\n\texport class Stack<T> implements IEnumerable, ICloneable\n\t{\n\t\tprotected _list: Array<T>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf Stack\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._list = new Array<T>();\n\t\t}\n\n\t\t/**\n\t\t * 获取一个迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new StackEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Stack<T> = new Stack<T>();\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.add(this._list[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空内容\n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tthis._list.splice(0, this._list.length);\n\t\t}\n\n\t\t/**\n\t\t * 添加一个成员\n\t\t * @param {T} item \n\t\t * @returns {T} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic add(item: T): T\n\t\t{\n\t\t\tthis._list.push(item);\n\t\t\treturn item;\n\t\t}\n\n\t\t/**\n\t\t * 移除一个成员\n\t\t * @returns {T} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic remove(): T\n\t\t{\n\t\t\tif (this._list.length > 0)\n\t\t\t{\n\t\t\t\treturn this._list.pop();\t//[this._list.length - 1];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 转换成普通数组\n\t\t * @returns {Array<any>} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic toArray(clone: boolean = true): Array<any>\n\t\t{\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\treturn this._list.slice(0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this._list;\n\t\t\t}\n\t\t}\n\n\t\tpublic indexOf(item: T): number\n\t\t{\n\t\t\treturn this._list.indexOf(item);\n\t\t}\n\n\t\t/**\n\t\t * 获取字符串信息\n\t\t * @returns {string} \n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\treturn \"Stack[\" + this._list.toString() + \"]\";\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @readonly\n\t\t * @type {T}\n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic get current(): T\n\t\t{\n\t\t\tif (this._list.length > 0)\n\t\t\t{\n\t\t\t\treturn this._list[this._list.length - 1];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取长度\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf Stack\n\t\t */\n\t\tpublic get length(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t}\n\n\t/**\n\t * 栈迭代器\n\t * @export\n\t * @class StackEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class StackEnumrator implements IEnumerator\n\t{\n\t\tprivate _stack: Stack<any>;\n\t\tprivate _temp: Array<any>;\n\t\tprivate _index: number = 0;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {Stack<any>} stack \n\t\t * \n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tconstructor(stack: Stack<any>)\n\t\t{\n\t\t\tthis._stack = stack;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._temp = this._stack.toArray();\n\t\t\tthis._index = this._temp.length - 1;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index--;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\tif (this._index >= 0 && this._index < this._temp.length)\n\t\t\t{\n\t\t\t\treturn this._temp[this._index];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf StackEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\tif (this._index >= this._temp.length) return true;\n\t\t\tif (this._index < 0) return true;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * 环形结构\n\t * @export\n\t * @class Ring\n\t * @implements {IEnumerable}\n\t * @implements {ICloneable}\n\t * @template T \n\t */\n\texport class Ring<T> implements IEnumerable, ICloneable\n\t{\n\t\tprotected _list: Array<T>;\n\t\tconstructor()\n\t\t{\n\t\t\tthis._list = new Array<T>();\n\t\t}\n\n\t\t/**\n\t\t * 克隆\n\t\t * @param {boolean} [deep] \n\t\t * @returns {*} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic clone(deep?: boolean): any\n\t\t{\n\t\t\tvar ret: Ring<T> = new Ring<T>();\n\t\t\tret.count = this.count;\n\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tret.set(this._list[i], i);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 获取迭代器\n\t\t * @returns {IEnumerator} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic getEnumerator(): IEnumerator\n\t\t{\n\t\t\treturn new RingEnumrator(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引\n\t\t * @protected\n\t\t * @param {number} index \n\t\t * @param {number} offset \n\t\t * @returns {number} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic getIndex(index: number, offset: number): number\n\t\t{\n\t\t\tvar ret: number = index + offset;\n\t\t\twhile (ret < 0)\n\t\t\t{\n\t\t\t\tret += this._list.length;\n\t\t\t}\n\n\t\t\tret = ret % this._list.length;\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * 清空内容\n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic clear(): void\n\t\t{\n\t\t\tif (this._list.length === 0) return;\n\t\t\tfor (var i: number = 0; i < this._list.length; i++)\n\t\t\t{\n\t\t\t\tthis._list[i] = null;\n\t\t\t}\n\n\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(\n\t\t\t\tthis, DataCollectionChangeType.Clear,\n\t\t\t\tthis, 0, null, null));\n\t\t}\n\n\t\t/**\n\t\t * 获取指定索引的内容\n\t\t * @param {number} index \n\t\t * @param {number} [offset=0] \n\t\t * @returns {T} \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic get(index: number, offset: number = 0): T\n\t\t{\n\t\t\tvar i: number = this.getIndex(index, offset);\n\t\t\treturn this._list[i];\n\t\t}\n\t\t/**\n\t\t * 设置指定索引的内容\n\t\t * @param {T} item \n\t\t * @param {number} index \n\t\t * @param {number} [offset=0] \n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic set(item: T, index: number, offset: number = 0): void\n\t\t{\n\t\t\tvar i: number = this.getIndex(index, offset);\n\t\t\tvar oldValue: T = this._list[i];\n\n\t\t\tif (oldValue === item) return;\n\t\t\tthis._list[i] = item;\n\n\t\t\tgetDataBindManager().distEvent(\n\t\t\t\tnew DataListChangeEventArgs(\n\t\t\t\t\tthis, DataCollectionChangeType.Modify,\n\t\t\t\t\tthis, index, item, oldValue));\n\t\t}\n\n\t\t/**\n\t\t * 获取数量\n\t\t * @type {number}\n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic get count(): number\n\t\t{\n\t\t\treturn this._list.length;\n\t\t}\n\n\t\t/**\n\t\t * 设置数量\n\t\t * @memberOf Ring\n\t\t */\n\t\tpublic set count(v: number)\n\t\t{\n\t\t\tvar offset: number = v - this._list.length;\n\n\t\t\tif (offset === 0) return;\n\n\t\t\tif (offset > 0)\n\t\t\t{\n\t\t\t\tfor (var i: number = 0; i < offset; i++)\n\t\t\t\t{\n\t\t\t\t\tthis._list.push(null);\n\t\t\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Add, this, this._list.length - 1, null, null));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffset = Math.abs(offset);\n\t\t\t\tfor (var i: number = 0; i < offset; i++)\n\t\t\t\t{\n\t\t\t\t\tvar index: number = this._list.length - 1;\n\t\t\t\t\tvar oldValue: T = this._list.pop();\n\t\t\t\t\tgetDataBindManager().distEvent(new DataListChangeEventArgs(this, DataCollectionChangeType.Remove, this, index, null, oldValue));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 环形结构迭代器\n\t * @export\n\t * @class RingEnumrator\n\t * @implements {IEnumerator}\n\t */\n\texport class RingEnumrator implements IEnumerator\n\t{\n\t\tprotected _ring: Ring<any>;\n\t\tprotected _index: number;\n\t\tprotected _offset: number;\n\n\t\t/**\n\t\t * 构造\n\t\t * Creates an instance of RingEnumrator.\n\t\t * @param {Ring<any>} ring \n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tconstructor(ring: Ring<any>)\n\t\t{\n\t\t\tthis._ring = ring;\n\t\t\tthis.reset();\n\t\t}\n\n\t\t/**\n\t\t * 重置迭代器\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._index = 0;\n\t\t}\n\n\t\t/**\n\t\t * 移至下一个\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic moveNext(): void\n\t\t{\n\t\t\tthis._index++;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前项\n\t\t * @returns {*} \n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic getCurrent(): any\n\t\t{\n\t\t\treturn this._ring.get(this._index, this._offset);\n\t\t}\n\n\t\t/**\n\t\t * 获取当前迭代是否已经结束\n\t\t * @returns {boolean} \n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic end(): boolean\n\t\t{\n\t\t\treturn this._ring.count <= 0 || this._index >= this._ring.count;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前偏移索引\n\t\t * @type {number}\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic get offset(): number\n\t\t{\n\t\t\treturn this._offset;\n\t\t}\n\t\t/**\n\t\t * 设置当前偏移索引\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic set offset(v: number)\n\t\t{\n\t\t\tthis._offset = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取当前索引\n\t\t * @readonly\n\t\t * @type {number}\n\t\t * @memberOf RingEnumrator\n\t\t */\n\t\tpublic get index(): number\n\t\t{\n\t\t\tif (this._ring.count <= 0) return 0;\n\t\t\tvar ret: number = this._index + this._offset;\n\t\t\tret = ret % this._ring.count;\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * 比较方法\n\t */\n\texport interface CompareMethod\n\t{\n\t\t(a: any, b: any): CompareResult\n\t}\n\n\t/**\n\t * 比较结果\n\t * @export\n\t * @enum {number}\n\t */\n\texport enum CompareResult\n\t{\n\t\t/**\n\t\t * 较小\n\t\t */\n\t\tLESS = -1,\n\t\t/**\n\t\t * 相等\n\t\t */\n\t\tEQUAL = 0,\n\t\t/**\n\t\t * 较大\n\t\t */\n\t\tGREATER = 1\n\t}\n\n\t/**\n\t * 迭代遍历\n\t * @export\n\t * @param {IEnumerable} data \n\t * @param {Function} handler \n\t * @param {*} [target] \n\t * @returns {void} \n\t */\n\texport function foreach(data: IEnumerable, handler: Function, target?: any): void\n\t{\n\t\tif (!data) return;\n\t\tif (!handler) return;\n\n\t\tvar iter: IEnumerator = data.getEnumerator();\n\t\tif (!iter) return;\n\n\t\twhile (!iter.end())\n\t\t{\n\t\t\tvar item: any = iter.getCurrent();\n\t\t\tif (handler.call(target, item)) break;\n\n\t\t\titer.moveNext();\n\t\t}\n\t}\n\n};\n\nexport = FWSData; ","/*\n * 环境参数\n * @Author: 刘强 \n * @Date: 2018-07-31 15:20:34 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 16:59:27\n */\n\nmodule FWSEnv\n{\n\t// NOTE: 基础参数\n\n\t/** 是否使用生产环境 */\n\texport const PROD: boolean = false;\n\n\texport const API_BASE_URL:string = PROD ? \n\t\t\t\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\t\t\t\t\"\";\n\texport const WS_BASE_URL:string = PROD ?\n\t\t\t\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\t\t\t\t\"\";\n\n\t/** 是否开启调试功能 */\n\texport const DEBUG :boolean = CC_DEBUG;\n\n\t/** 是否模拟器环境 */\n\texport const SIMULATOR: boolean = true;\n\n\t/** 是否编辑器环境 */\n\texport const EDITOR:boolean = CC_EDITOR;\n\n\t// NOTE: 高级参数\n\n\t/** 是否开启高级调试功能 */\n\texport const DEBUG_ADVANCED: boolean = DEBUG && SIMULATOR && true;\n\n\t/** 是否跟踪MVC通知 */\n\texport const DEBUG_MVC_TRACE: boolean = DEBUG && true;\n\t\n\t/** 是否跟踪CONTEXT开关 */\n\texport const DEBUG_CONTEXT_TRACE: boolean = DEBUG && false;\n\n\t/** 是否跟踪HTTP请求 */\n\texport const DEBUG_WEBCLIENT_TRACE: boolean = DEBUG && false;\n}\nexport = FWSEnv;","/*\n * 公共代码的MVC框架, 接替原JS版的FWS_MVC\n * @Author: 刘强\n * @Date: 2017-03-01 14:19:48 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 16:50:52\n */\n\n\nimport FWSData = require('../data/FWSData');\nimport X = require('../utils/X');\nimport FWSEnv = require('../FWSEnv');\n\n\nmodule FWSMvc\n{\n\n\texport const MVC_CONTEXT_TRY_CATCH: boolean = true;\n\n\t//-------------------------------------- 状态系统\n\n\t/**\n\t * 上下文状态节点接口\n\t * @export\n\t * @interface IContext\n\t */\n\texport interface IContext\n\t{\n\t\tonEnterContext(): void;\n\t\tonLeaveContext(): void;\n\t\tsetModules(...mods: Array<IFMessageConnection>): void;\n\t}\n\n\t/**\n\t * 上下文状态点节的成员接口\n\t */\n\texport interface IContextMember\n\t{\n\t\tonEnterContextMember(): void;\n\t\tonLeaveContextMember(): void;\n\t}\n\n\t/**\n\t * 上下文状态节点\n\t * @export\n\t * @class FContext\n\t * @implements {IContext}\n\t */\n\texport class FContext implements IContext\n\t{\n\t\tprotected _id: string;\n\t\tprotected _mods: Array<IFMessageConnection>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf FContext\n\t\t */\n\t\tconstructor(id: string, ...mods: Array<IFMessageConnection>)\n\t\t{\n\t\t\tthis._id = id;\n\t\t\tthis._mods = new Array<IFMessageConnection>();\n\n\t\t}\n\n\t\tpublic initMessageConnections(mods: Array<IFMessageConnection>)\n\t\t{\n\t\t\tthis._mods.splice(0, this._mods.length);\n\t\t\tfor (var i: number = 0; i < mods.length; i++)\n\t\t\t{\n\t\t\t\tthis._mods.push(mods[i]);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 进入当前状态节点时\n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic onEnterContext(): void\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._mods.length; i++)\n\t\t\t{\n\t\t\t\tvar mod: IFMessageConnection = this._mods[i];\n\n\t\t\t\tif (mod.messageConnectionActived) \n\t\t\t\t{\n\t\t\t\t\tX.warn(\"(onEnterContext) IFMessageConnection::messageConnectionActived !\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tmod.onEnterContextMember();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err)\n\t\t\t\t\t{\n\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmod.onEnterContextMember();\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 离开当前状态节点时\n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic onLeaveContext(): void\n\t\t{\n\t\t\tfor (var i: number = 0; i < this._mods.length; i++)\n\t\t\t{\n\t\t\t\tvar mod: IFMessageConnection = this._mods[i];\n\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tmod.onLeaveContextMember();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err)\n\t\t\t\t\t{\n\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmod.onLeaveContextMember();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 设置模块内容\n\t\t * @param {...Array<IFMessageConnection>} mods \n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic setModules(...mods: Array<IFMessageConnection>): void\n\t\t{\n\t\t\tfor (var i: number = 0; i < mods.length; i++)\n\t\t\t{\n\t\t\t\tthis._mods.push(mods[i]);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 获取上下文标识\n\t\t * @readonly\n\t\t * @type {string}\n\t\t * @memberOf FContext\n\t\t */\n\t\tpublic get id(): string\n\t\t{\n\t\t\treturn this._id;\n\t\t}\n\t}\n\n\t/**\n\t * 上下文管理器实例\n\t * @class FContextManager\n\t */\n\tclass FContextManager\n\t{\n\t\tstatic _contextManager;\n\n\t\tprotected _root: FWSData.Node<IContext>;\n\t\tprotected _current: FWSData.Node<IContext>;\n\t\tprotected _history: FWSData.Stack<FWSData.Node<IContext>>;\n\n\t\tpublic onContextChanged: Function;\n\n\t\t/**\n\t\t * 构造\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tif (FContextManager._contextManager) throw \"FContextManager被设计为单例, 不能创建多个实例\";\n\n\t\t\tthis._history = new FWSData.Stack<FWSData.Node<IContext>>();\n\t\t}\n\n\t\t/**\n\t\t * 初始化\n\t\t * @param {FWSData.Node<IContext>} root \n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic init(root: FWSData.Node<IContext>): void\n\t\t{\n\t\t\tthis._root = root;\n\t\t}\n\n\n\t\t/**\n\t\t * 切换到指定的上下文节点\n\t\t * @param {FWSData.Node<IContext>} node \n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic goto(node: FWSData.Node<IContext>, sh: boolean = true): void\n\t\t{\n\t\t\tif (node && node.rootNode === this._root &&\n\t\t\t\tnode !== this._current)\n\t\t\t{\n\t\t\t\tvar theParentNode: FWSData.Node<IContext> = null;\n\n\t\t\t\t//关闭之前的无关节点\n\t\t\t\tif (this._current)\n\t\t\t\t{\n\t\t\t\t\ttheParentNode = this._current.getParentByOtherNode(node);\n\t\t\t\t\tvar closeList: Array<FWSData.Node<IContext>> = this._current.getParentNodes();\n\t\t\t\t\tvar closeListCount: number = closeList.length;\n\n\t\t\t\t\tfor (var i: number = closeListCount - 1; i >= 0; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar closeContext: FWSData.Node<IContext> = closeList[i];\n\n\t\t\t\t\t\tif (closeContext === theParentNode) break;\n\n\t\t\t\t\t\tif (FWSEnv.DEBUG_CONTEXT_TRACE) X.log(\"(Context) onLeaveContext\", closeContext.path);\n\t\t\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcloseContext.data.onLeaveContext();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (err)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcloseContext.data.onLeaveContext();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//打开需要的新节点\n\t\t\t\tvar found: boolean = false;\n\t\t\t\tvar openList: Array<FWSData.Node<IContext>> = node.getParentNodes();\n\t\t\t\tvar theParentNodeIsNull: boolean = true;\n\n\t\t\t\tif (theParentNode) theParentNodeIsNull = false;\n\n\t\t\t\tfor (var i: number = 0; i < openList.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar openContext: FWSData.Node<IContext> = openList[i];\n\t\t\t\t\tif (theParentNodeIsNull)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (FWSEnv.DEBUG_CONTEXT_TRACE) X.log(\"(Context) onEnterContext\", openContext.path);\n\t\t\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (err)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (found)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (openContext != theParentNode || theParentNodeIsNull)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (FWSEnv.DEBUG_CONTEXT_TRACE) X.log(\"(Context) onEnterContext\", openContext.path);\n\t\t\t\t\t\t\tif (MVC_CONTEXT_TRY_CATCH)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (err)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tX.error(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\topenContext.data.onEnterContext();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (openContext === theParentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//----\n\t\t\t\tthis._current = node;\n\t\t\t\tif (sh) \n\t\t\t\t{\n\t\t\t\t\tthis._history.add(node);\n\t\t\t\t\tX.log(\"blue\", \"Context goto\", node.path);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tX.log(\"blue\", \"Context goto(no history)\", node.path);\n\t\t\t\t}\n\n\t\t\t\tif (this.onContextChanged)\n\t\t\t\t{\n\t\t\t\t\tthis.onContextChanged(node.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 切换到指定ID的上下文节点\n\t\t * \n\t\t * @param {string} id \n\t\t * \n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic gotoID(id: string): void\n\t\t{\n\t\t\tif (this._root)\n\t\t\t{\n\t\t\t\tvar node: FWSData.Node<IContext> = this._root.find(id);\n\t\t\t\tthis.goto(node);\n\t\t\t}\n\t\t}\n\n\t\t/** 检查指定的节点是否属激活状态 */\n\t\tpublic checkActived(node: FWSData.Node<IContext>): boolean\n\t\t{\n\t\t\tif (node && this._current)\n\t\t\t{\n\t\t\t\tvar n: FWSData.Node<IContext> = this._current;\n\t\t\t\twhile (n)\n\t\t\t\t{\n\t\t\t\t\tif (n === node) return true;\n\t\t\t\t\tn = n.parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/** 检查指定ID的节点是否属激活状态 */\n\t\tpublic checkActivedById(id: string): boolean\n\t\t{\n\t\t\tif (this._root)\n\t\t\t{\n\t\t\t\tvar node: FWSData.Node<IContext> = this._root.find(id);\n\t\t\t\treturn this.checkActived(node);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * 回退\n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic back(): void\n\t\t{\n\t\t\tif (this._history.length > 1)\n\t\t\t{\n\t\t\t\tvar backNode: FWSData.Node<IContext> = this._history.remove();\n\t\t\t\tthis.goto(this._history.current, false);\n\t\t\t}\n\t\t}\n\n\t\tpublic clearHistory(): void\n\t\t{\n\t\t\tthis._history.clear();\n\t\t}\n\n\t\t/**\n\t\t * 获取当前节点\n\t\t * \n\t\t * @readonly\n\t\t * @type {FWSData.Node<IContext>}\n\t\t * @memberOf FContextManager\n\t\t */\n\t\tpublic get current(): FWSData.Node<IContext>\n\t\t{\n\t\t\treturn this._current;\n\t\t}\n\t}\n\n\t/**\n\t * 获取上下文管理器实例\n\t * @export\n\t * @returns {FContextManager} \n\t */\n\texport function ContextManager(): FContextManager\n\t{\n\t\tif (!FContextManager._contextManager) FContextManager._contextManager = new FContextManager();\n\t\treturn FContextManager._contextManager;\n\t}\n\n\t//-------------------------------------- 消息系统\n\n\t/**\n\t * MVC消息通知对象\n\t * @export\n\t * @class FMessage\n\t */\n\texport class FMessage<T>\n\t{\n\t\tprotected _key: string;\n\t\tprotected _queue: string;\n\t\tprotected _sended: boolean;\n\t\tprotected _completed: boolean;\n\t\tprotected _data: T;\n\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {string} key 消息标识\n\t\t * @param {string} [category=\"\"] 消息队列类型\n\t\t * @memberOf FMessage\n\t\t */\n\t\tconstructor(key: string, data:T, queue: string = \"\")\n\t\t{\n\t\t\tthis._key = key;\n\t\t\tthis._queue = queue;\n\t\t\tthis._data = data;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置附加数据\n\t\t */\n\t\tpublic get data():T\n\t\t{\n\t\t\treturn this._data;\n\t\t}\n\t\tpublic set data(v:T)\n\t\t{\n\t\t\tthis._data = v;\n\t\t}\n\t\t\n\n\t\t/** 重置 */\n\t\tpublic reset(): void\n\t\t{\n\t\t\tthis._sended = false;\n\t\t\tthis._completed = false;\n\t\t}\n\n\t\t/**\n\t\t * 将消息发至消息路由\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic send(): void\n\t\t{\n\t\t\tif (this._sended) return;\n\n\t\t\tRouter().send(this);\n\n\t\t\tthis._sended = true;\n\t\t}\n\n\t\t/**\n\t\t * 将消息标为完成\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic complete(): void\n\t\t{\n\t\t\tif (this._completed) return;\n\t\t\tthis._completed = true;\n\n\t\t\tRouter().complete(this);\n\t\t}\n\n\t\t/**\n\t\t * 获取消息类型\n\t\t * @type {string}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get key(): string\n\t\t{\n\t\t\treturn this._key;\n\t\t}\n\t\t/**\n\t\t * 设置消息类型\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic set key(value: string)\n\t\t{\n\t\t\tthis._key = value;\n\t\t}\n\n\n\t\t/**\n\t\t * 获取消息队列类型\n\t\t * @type {string}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get queue(): string\n\t\t{\n\t\t\treturn this._queue;\n\t\t}\n\t\t/**\n\t\t * 设置消息队列类型\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic set queue(value: string)\n\t\t{\n\t\t\tthis._queue = value;\n\t\t}\n\n\t\t/**\n\t\t * 获取消息是否已经被标为完成\n\t\t * @readonly\n\t\t * @type {boolean}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get completed(): boolean\n\t\t{\n\t\t\treturn this._completed;\n\t\t}\n\n\t\t/**\n\t\t * 获取消息是否已经发至路由\n\t\t * @readonly\n\t\t * @type {boolean}\n\t\t * @memberOf FMessage\n\t\t */\n\t\tpublic get sended(): boolean\n\t\t{\n\t\t\treturn this._sended;\n\t\t}\n\n\t\t\n\n\t\t/**\n\t\t * 返回文本信息\n\t\t * @returns {string} \n\t\t * @memberof FMessage\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\n\t\t\tvar ret: string = this._key + \", \";\n\t\t\tfor (var key in this._data)\n\t\t\t{\n\t\t\t\tvar value: any = this._data[key];\n\n\t\t\t\tif (value === null) value = \"null\";\n\t\t\t\telse if (value === undefined) value = \"undefined\";\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t//简单版本\n\t\t\t\t\t// if (!useJsonOutputFMessageArgs)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = value.toString();\n\t\t\t\t\t}\n\t\t\t\t\t//JSON版本\n\t\t\t\t\t// else\n\t\t\t\t\t// {\n\t\t\t\t\t// \tvalue = JSON.stringify(value);\n\t\t\t\t\t// }\n\t\t\t\t}\n\n\t\t\t\tif (ret.length > 0)\n\t\t\t\t{\n\t\t\t\t\tret += \",\";\n\t\t\t\t}\n\n\t\t\t\tret += key + \"=\" + value;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t}\n\n\t/**\n\t * MVC消息连接接口\n\t * @export\n\t * @interface IFMessageConnection\n\t */\n\texport interface IFMessageConnection extends IContextMember\n\t{\n\t\t/**\n\t\t * 处理消息通知\n\t\t * @param {FMessage} msg 传入的消息通知\n\t\t * @returns {boolean} 返回是否忽略该消息的处理\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tonFMessage(msg: FMessage<any>): boolean;\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tconnect(): void;\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tdisconnect(): void;\n\n\t\t/**\n\t\t * 接入路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tonConnect(): void;\n\n\t\t/**\n\t\t * 断开路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tonDisconnect(): void;\n\n\t\t/** 是否处于激活状态 */\n\t\tmessageConnectionActived: boolean;\n\t}\n\n\t/**\n\t * MVC消息连接的抽象类\n\t * @export\n\t * @class FMessageConnectionAbstract\n\t * @implements {IFMessageConnection}\n\t */\n\texport abstract class FMessageConnectionAbstract implements IFMessageConnection\n\t{\n\t\tprotected _messageConnectionActived: boolean;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tthis._messageConnectionActived = false;\n\t\t}\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tpublic connect(): void\n\t\t{\n\t\t\tRouter().connect(this);\n\t\t\tthis.onConnect();\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tpublic disconnect(): void\n\t\t{\n\t\t\tRouter().disconnect(this);\n\t\t\tthis.onDisconnect();\n\t\t}\n\n\t\t/**\n\t\t * 接入路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tpublic onConnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 断开路由之后\n\t\t * @memberOf IFMessageConnection\n\t\t */\n\t\tpublic onDisconnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 处理消息通知\n\t\t * @param {FMessage} msg 传入的消息通知\n\t\t * @returns {boolean} 返回是否忽略该消息的处理\n\t\t * \n\t\t * @memberOf FMessageConnectionAbstract\n\t\t */\n\t\tpublic onFMessage(msg: FMessage<any>): boolean\n\t\t{\n\t\t\tvar handlerName: string = \"onFMessage_\" + msg.key;\n\t\t\tvar handler: Function = this[handlerName];\n\t\t\tif (handler) \n\t\t\t{\n\t\t\t\treturn !handler.call(this, msg);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic onEnterContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = true;\n\t\t\tthis.connect();\n\t\t}\n\n\t\tpublic onLeaveContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = false;\n\t\t\tthis.disconnect();\n\t\t}\n\n\t\tpublic get messageConnectionActived(): boolean\n\t\t{\n\t\t\treturn this._messageConnectionActived;\n\t\t}\n\t}\n\n\t/**\n\t * MVC消息连接的代理类\n\t * @export\n\t * @class FMessageConnectionDelegate\n\t * @implements {IFMessageConnection}\n\t */\n\texport class FMessageConnectionDelegate implements IFMessageConnection\n\t{\n\t\tprotected _owner: any;\n\t\tprotected _messageConnectionActived: boolean;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {*} owner \n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tconstructor(owner: any)\n\t\t{\n\t\t\tthis._owner = owner;\n\t\t}\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic connect(): void\n\t\t{\n\t\t\tRouter().connect(this);\n\t\t\tthis.onConnect();\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic disconnect(): void\n\t\t{\n\t\t\tRouter().disconnect(this);\n\t\t\tthis.onDisconnect();\n\t\t}\n\n\t\t/**\n\t\t * 接入路由之后\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic onConnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 断开路由之后\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic onDisconnect(): void\n\t\t{\n\t\t}\n\n\t\t/**\n\t\t * 处理消息通知\n\t\t * @param {FMessage} msg 传入的消息通知\n\t\t * @returns {boolean} 返回是否忽略该消息的处理\n\t\t * @memberOf FMessageConnectionDelegate\n\t\t */\n\t\tpublic onFMessage(msg: FMessage<any>): boolean\n\t\t{\n\t\t\tvar handlerName: string = \"onFMessage_\" + msg.key;\n\t\t\tvar handler: Function = this._owner[handlerName];\n\t\t\tif (handler) \n\t\t\t{\n\t\t\t\treturn !handler.call(this._owner, msg);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic onEnterContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = true;\n\t\t\tthis.connect();\n\t\t}\n\n\t\tpublic onLeaveContextMember(): void\n\t\t{\n\t\t\tthis._messageConnectionActived = false;\n\t\t\tthis.disconnect();\n\t\t}\n\n\t\tpublic get messageConnectionActived(): boolean\n\t\t{\n\t\t\treturn this._messageConnectionActived;\n\t\t}\n\t}\n\n\t/**\n\t * MVC消息路由\n\t * @class FMessageRouter\n\t */\n\tclass FMessageRouter\n\t{\n\t\tstatic _router: FMessageRouter;\n\n\t\tprotected _queues: FWSData.Dict<FWSData.Queue<FMessage<any>>>;\n\t\tprotected _connections: FWSData.List<IFMessageConnection>;\n\n\t\t/**\n\t\t * 构造\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tconstructor()\n\t\t{\n\t\t\tif (FMessageRouter._router) throw \"FMessageRouter被设计为单例, 不能创建多个实例\";\n\t\t\tthis._queues = new FWSData.Dict<FWSData.Queue<FMessage<any>>>();\n\t\t\tthis._connections = new FWSData.List<IFMessageConnection>();\n\t\t}\n\n\t\t/**\n\t\t * 创建队列\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic createQueue(category: string): void\n\t\t{\n\t\t\tif (this._queues.containKey(category)) return;\n\t\t\tthis._queues.setItem(category, new FWSData.Queue<FMessage<any>>());\n\t\t}\n\n\t\t/**\n\t\t * 删除队列\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic removeQueue(category: string): void\n\t\t{\n\t\t\tif (!this._queues.containKey(category)) return;\n\t\t\tthis._queues.deleteKey(category);\n\t\t}\n\n\t\t/**\n\t\t * 删除所有队列\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic removeAllQueues(): void\n\t\t{\n\t\t\tthis._queues.clear();\n\t\t}\n\n\t\t/**\n\t\t * 获取队列\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic getQueue(category: string): FWSData.Queue<FMessage<any>>\n\t\t{\n\t\t\tif (this._queues.containKey(category))\n\t\t\t{\n\t\t\t\treturn this._queues.getItem(category);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * 清空特定队列的消息\n\t\t * @param {string} category \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic clearQueueMessages(category: string): void\n\t\t{\n\t\t\tX.log(\"FMessage\", \"clearQueueMessages\",  category);\n\t\t\tif (this._queues.containKey(category))\n\t\t\t{\n\t\t\t\tthis._queues.getItem(category).clear();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 清空所有队列的消息\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic clearAllQueueMessages(): void\n\t\t{\n\t\t\tvar keys: Array<string> = this._queues.keys;\n\t\t\tfor (var i: number = 0; i < keys.length; i++)\n\t\t\t{\n\t\t\t\tvar key: string = keys[i];\n\t\t\t\tthis._queues.getItem(key).clear();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 连接至消息路由\n\t\t * @param {IFMessageConnection} connection \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic connect(connection: IFMessageConnection): void\n\t\t{\n\t\t\tif (this._connections.indexOf(connection) >= 0)\n\t\t\t{\n\t\t\t\t//警告:重复的连接\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._connections.add(connection);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开\n\t\t * @param {IFMessageConnection} connection \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic disconnect(connection: IFMessageConnection): void\n\t\t{\n\t\t\tif (this._connections.indexOf(connection) >= 0)\n\t\t\t{\n\t\t\t\tthis._connections.remove(connection);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 从消息路由断开所有连接\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic disconnectAll(): void\n\t\t{\n\t\t\tthis._connections.clear();\n\t\t}\n\n\t\t/**\n\t\t * 发送消息到路由的队列\n\t\t * @param {FMessage} msg \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic send(msg: FMessage<any>): void\n\t\t{\n\t\t\tif (msg.sended) return;\n\n\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)发送\", msg.queue, msg);\n\n\n\n\t\t\tif (this._queues.containKey(msg.queue))\n\t\t\t{\n\t\t\t\tlet queue: FWSData.Queue<FMessage<any>> = this._queues.getItem(msg.queue);\n\t\t\t\tqueue.add(msg);\n\t\t\t\tif (queue.length === 1)\n\t\t\t\t{\n\t\t\t\t\tthis.push(msg);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tFWSMvc.Router().update();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.push(msg);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 从路由的队列中, 将消息推出给每个正在连接的模块\n\t\t * @private\n\t\t * @param {FMessage} msg \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tprivate push(msg: FMessage<any>): void\n\t\t{\n\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)推送\", msg.queue, msg);\n\n\t\t\tlet mods: Array<IFMessageConnection> = this._connections.toArray();\n\t\t\tlet counter: number = 0;\n\t\t\tfor (var i: number = 0; i < mods.length; i++)\n\t\t\t{\n\t\t\t\tlet mod: IFMessageConnection = mods[i];\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tlet isHandled: boolean = mod.onFMessage(msg);\n\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\tif (isHandled)\n\t\t\t\t\t{\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tif (msg.queue && msg.queue.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)处理\", mod);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{}\n\t\t\t}\n\t\t\tif (counter === 0)\n\t\t\t{\n\t\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)自动完成\", msg.queue, msg);\n\t\t\t\tmsg.complete();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 将消息通知标为已经处理完成\n\t\t * @param {FMessage} msg \n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic complete(msg: FMessage<any>): void\n\t\t{\n\t\t\tif(this._queues.keys.indexOf(msg.queue)>=0) \n\t\t\t{\n\t\t\t\tif(FWSEnv.DEBUG_MVC_TRACE) X.log(\"(FMessage)完成\", msg.queue, msg);\n\t\t\t}\n\n\t\t\tFWSMvc.Router().update();\n\t\t}\n\n\t\t/**\n\t\t * 循环更新\n\t\t * @memberOf FMessageRouter\n\t\t */\n\t\tpublic update(): void\n\t\t{\n\t\t\tvar keys: Array<string> = this._queues.keys;\n\t\t\tfor (var i: number = 0; i < keys.length; i++)\n\t\t\t{\n\t\t\t\tvar key: string = keys[i];\n\t\t\t\tvar queue: FWSData.Queue<FMessage<any>> = this._queues.getItem(key);\n\t\t\t\tif (queue.current && queue.current.completed)\n\t\t\t\t{\n\t\t\t\t\tqueue.remove();\n\t\t\t\t\tif (queue.current) Router().push(queue.current);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 获取消息路由实例\n\t * @export\n\t * @returns {FMessageRouter} \n\t */\n\texport function Router(): FMessageRouter\n\t{\n\t\tif (!FMessageRouter._router) \n\t\t{\n\t\t\tFMessageRouter._router = new FMessageRouter();\n\t\t}\n\t\treturn FMessageRouter._router;\n\t}\n\n\t//-------\n\n\texport function createContext(key:string, parentContext:FWSData.Node<IContext> = null, ...mods:IFMessageConnection[]):FWSData.Node<IContext>\n\t{\n\t\tvar ret:FWSData.Node<IContext> = new FWSData.Node<IContext>(key);\n\t\tret.data = new FContext(key);\n\t\t\n\t\tfor(var i:number = 0; i < mods.length; i++)\n\t\t{\n\t\t\tret.data.setModules(mods[i]);\n\t\t}\n\n\t\tif(parentContext)\n\t\t{\n\t\t\tparentContext.add(ret);\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n}\n\n\nexport = FWSMvc;","/*\n * Http 常用功能\n * @Author: 刘强 \n * @Date: 2018-07-16 17:47:09 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-16 17:47:29\n */\nmodule HttpUtils\n{\n\n\t/**\n\t * URL正则表达式\n\t */\n\tconst regexUrl: RegExp = /^(http|https):\\/\\/([^\\/\\:]+)(:\\d+)?([^\\?\\#]*)(\\?[^#]*)?(#[^\\r\\n]*)?$/;\n\n\t/**\n\t * 添加一个k/v参数字符串\n\t * @export\n\t * @param {string} src \n\t * @param {string} name \n\t * @param {*} value \n\t * @returns {string} \n\t */\n\texport function addParam(src: string, name: string, value: any): string\n\t{\n\t\tvar ret: string = src + \"\";\n\n\t\tif (!name) return ret;\n\t\tif (value === null || value === undefined) return ret;\n\n\t\tif (ret.length > 0) ret += \"&\";\n\n\t\tret += encodeURIComponent(name);\n\t\tret += \"=\";\n\t\tret += encodeURIComponent(value.toString());\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * 获取k/v参数集的字符串\n\t * @export\n\t * @param {*} data \n\t * @returns {string} \n\t */\n\texport function getParams(data: any): string\n\t{\n\t\tvar ret: string = \"\";\n\n\t\tif (data && typeof (data) === \"object\")\n\t\t{\n\t\t\tfor (var key in data)\n\t\t\t{\n\t\t\t\tvar value: any = data[key];\n\t\t\t\tret = addParam(ret, key.toString(), value);\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * 检查是否是合法的URL地址\n\t * @param uri \n\t */\n\texport function isUrl(uri: string): boolean\n\t{\n\t\tif (uri.toLowerCase() === \"about:blank\") return true;\n\t\telse return regexUrl.test(uri);\n\t}\n\n\t/**\n\t * URL地址处理类, 仅限http/https方案\n\t * @class URL\n\t */\n\texport class URL\n\t{\n\t\t/**\n\t\t * 方案\n\t\t * @protected\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tprivate _scheme: string;\n\n\t\t/**\n\t\t * 主机\n\t\t * @protected\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tprivate _host: string;\n\n\t\t/**\n\t\t * 端口\n\t\t * @protected\n\t\t * @type {number}\n\t\t * @memberof URL\n\t\t */\n\t\tprivate _port: number;\n\n\t\t/**\n\t\t * 路径\n\t\t * @protected\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tprivate _path: string;\n\n\t\t/**\n\t\t * 请求参数\n\t\t * @protected\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tprivate _query: string;\n\n\t\t/**\n\t\t * 锚点参数\n\t\t * @protected\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tprivate _anchor: string;\n\n\t\t/**\n\t\t * 构造\n\t\t * @param {string} uri 参考地址\n\t\t * @param {string} baseUrl 基础地址\n\t\t * @memberof URL\n\t\t */\n\t\tconstructor(uri?: string, baseUrl?: string)\n\t\t{\n\t\t\tthis._scheme = \"\";\n\t\t\tthis._host = \"\";\n\t\t\tthis._port = 0;\n\t\t\tthis._path = \"\";\n\t\t\tthis._query = \"\";\n\t\t\tthis._anchor = \"\";\n\t\t\tthis.parse(uri, baseUrl);\n\t\t}\n\n\t\t/**\n\t\t * 检查URL是否合法\n\t\t * @param {string} uri \n\t\t * @returns {boolean} \n\t\t * @memberof URL\n\t\t */\n\t\tstatic isUrl(uri: string): boolean\n\t\t{\n\t\t\treturn HttpUtils.isUrl(uri);\n\t\t}\n\n\t\t/**\n\t\t * 解析URL地址\n\t\t * @protected\n\t\t * @param {string} uri 参考地址\n\t\t * @param {string} baseUrl 基础地址\n\t\t * @memberof URL\n\t\t */\n\t\tprotected parse(uri: string, baseUrl: string): void\n\t\t{\n\t\t\tif (!uri) return;\n\t\t\tvar url: string = uri;\n\t\t\tif (baseUrl && baseUrl.length > 0)\n\t\t\t{\n\t\t\t\tif (baseUrl.substr(baseUrl.length - 1, 1) === \"/\" || uri.substr(0, 1) === \"/\")\n\t\t\t\t{\n\t\t\t\t\turl = baseUrl + uri;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\turl = baseUrl + \"/\" + uri;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!regexUrl.test(url)) return;\n\n\t\t\tvar ps: RegExpExecArray = regexUrl.exec(url);\n\n\t\t\tthis._scheme = (ps[1] ? ps[1] : \"\");\n\t\t\tthis._host = (ps[2] ? ps[2] : \"\");\n\t\t\tif (ps[3] && ps[3].length > 1)\n\t\t\t{\n\t\t\t\tthis._port = parseInt(ps[3].substr(1));\n\t\t\t}\n\t\t\telse this._port = 0;\n\t\t\tthis._path = (ps[4] ? ps[4] : \"\");\n\n\t\t\t//query\n\t\t\tif (ps[5] && ps[5].length > 1)\n\t\t\t{\n\t\t\t\tthis._query = ps[5].substr(1);\n\t\t\t}\n\t\t\telse this._query = \"\";\n\n\t\t\t//anchor\n\t\t\tif (ps[6] && ps[6].length > 1)\n\t\t\t{\n\t\t\t\tthis._anchor = ps[6].substr(1);\n\t\t\t}\n\t\t\telse this._anchor = \"\";\n\t\t}\n\n\t\t/**\n\t\t * 添加一个请求参数\n\t\t * @param {string} name \n\t\t * @param {*} value \n\t\t * @memberof URL\n\t\t */\n\t\tpublic addQueryParam(name: string, value: any): void\n\t\t{\n\t\t\tthis._query = addParam(this._query, name, value);\n\t\t}\n\n\t\t/**\n\t\t * 添加一个锚点参数\n\t\t * @param {string} name \n\t\t * @param {*} value \n\t\t * @memberof URL\n\t\t */\n\t\tpublic addAnchorParam(name: string, value: any): void\n\t\t{\n\t\t\tthis._anchor = addParam(this._anchor, name, value);\n\t\t}\n\n\n\n\t\t/**\n\t\t * 设置请求数据\n\t\t * @param {*} data \n\t\t * @memberof URL\n\t\t */\n\t\tpublic setQueryParams(data: any): void\n\t\t{\n\t\t\tthis._query = getParams(data);\n\t\t}\n\n\t\t/**\n\t\t * 设置锚点数据\n\t\t * @param {*} data \n\t\t * @memberof URL\n\t\t */\n\t\tpublic setAnchorParams(data: any): void\n\t\t{\n\t\t\tthis._anchor = getParams(data);\n\t\t}\n\n\t\t/**\n\t\t * 获取URL地址字符串\n\t\t * @returns {string} \n\t\t * @memberof URL\n\t\t */\n\t\tpublic toString(): string\n\t\t{\n\t\t\tvar ret: string = \"\";\n\n\t\t\tret += this._scheme + \"://\";\n\t\t\tret += this._host;\n\t\t\tif (this._port > 0)\n\t\t\t{\n\t\t\t\tret += \":\" + this._port.toString();\n\t\t\t}\n\t\t\tret += this._path;\n\t\t\tif (this._query && this._query.length > 0)\n\t\t\t{\n\t\t\t\tret += \"?\" + this._query;\n\t\t\t}\n\t\t\tif (this._anchor && this._anchor.length > 0)\n\t\t\t{\n\t\t\t\tret += \"#\" + this._anchor;\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t//属性\n\n\t\t/**\n\t\t * 获取或设置地址方案(HTTP/HTTPS)\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tpublic get scheme(): string\n\t\t{\n\t\t\treturn this._scheme;\n\t\t}\n\t\tpublic set scheme(v: string)\n\t\t{\n\t\t\tthis._scheme = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置主机地址(域名或者端口)\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tpublic get host(): string\n\t\t{\n\t\t\treturn this._host;\n\t\t}\n\t\tpublic set host(v: string)\n\t\t{\n\t\t\tthis._host = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置端口号\n\t\t * @type {number}\n\t\t * @memberof URL\n\t\t */\n\t\tpublic get port(): number\n\t\t{\n\t\t\treturn this._port;\n\t\t}\n\t\tpublic set port(v: number)\n\t\t{\n\t\t\tthis._port = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置路径\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tpublic get path(): string\n\t\t{\n\t\t\treturn this._path;\n\t\t}\n\t\tpublic set path(v: string)\n\t\t{\n\t\t\tthis._path = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置请求参数(GET)\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tpublic get query(): string\n\t\t{\n\t\t\treturn this._query;\n\t\t}\n\t\tpublic set query(v: string)\n\t\t{\n\t\t\tthis._query = v;\n\t\t}\n\n\t\t/**\n\t\t * 获取或设置锚点参数\n\t\t * @type {string}\n\t\t * @memberof URL\n\t\t */\n\t\tpublic get anchor(): string\n\t\t{\n\t\t\treturn this._anchor;\n\t\t}\n\t\tpublic set anchor(v: string)\n\t\t{\n\t\t\tthis._anchor = v;\n\t\t}\n\t}\n}\n\nexport = HttpUtils;\n\n// SAMPLE:\n// var u = new HttpUtils.URL(\"http://www.163.com:8080/abcde/ddd/p/1232345.html?a=1&b=2&c=3#abcdefg\");\n// var u = new HttpUtils.URL(\"/module/api\", \"http://poker.smzy.cc:8080\");\n// u.addQueryParam(\"token\",\"OOOOOOO\");\n// u.addQueryParam(\"userid\", \"10175000062\");\n// u.addAnchorParam(\"gameuuid\", \"XXXXXXXX\");\n// console.log(u);\n// console.log(u.toString());\n\n","/*\n * 测试场景\n * @Author: 刘强 \n * @Date: 2018-07-31 16:14:10 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 17:10:49\n */\n\n\nconst { ccclass, property } = cc._decorator;\n\nimport X = require('../../fws/utils/X');\nimport FWSComponent = require('../../fws/display/FWSComponent');\nimport WebClient = require('../../fws/net/WebClient');\n\n\n@ccclass\nexport default class TestScene extends FWSComponent.default\n{\n\n    start()\n    {\n        WebClient.get(\"https://www.baidu.com\", {}, this, (res) =>\n        {\n            X.log(\"success\", res);\n            debugger\n        }, (res) =>\n        {\n            X.log(\"fail\", res);\n            debugger\n        });\n    }\n\n}\n","/*\n * web请求 (短连接)\n * @Author: 刘强 \n * @Date: 2018-07-16 17:37:04 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 17:02:11\n */\n\n\nimport HttpUtils = require('../utils/HttpUtils');\nimport FWSEnv = require('../FWSEnv');\nimport X = require('../utils/X');\n\n\n\nmodule WebClient\n{\n\t/** GET超时时间 */\n\texport const GET_OVERTIME: number = 1000 * 5;\n\n\t/** POST超时时间 */\n\texport const POST_OVERTIME: number = 1000 * 10;\n\n\t/**\n\t * uri检查方法类型\n\t * @export\n\t * @interface uriCheckerType\n\t */\n\texport interface uriCheckerType\n\t{\n\t\t(uri: string, data: any): string\n\t}\n\n\t/**\n\t * 参数对象检查方法类型\n\t * @export\n\t * @interface dataCheckerType\n\t */\n\texport interface dataCheckerType\n\t{\n\t\t(data: any): void\n\t}\n\n\t/**\n\t * uri检查方法类型\n\t */\n\texport var uriChecker: uriCheckerType = function (uri: string, data: any): string\n\t{\n\t\tif (!data) return uri;\n\n\t\t// data.appid = 2;\n\t\t// data.token = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tdata.time = new Date().getTime();\n\n\t\tvar ret: string = uri + \"\";\n\n\t\tif (ret.indexOf(\"?\") < 0)\n\t\t{\n\t\t\tret += \"?\";\n\t\t}\n\n\t\tvar keys: string[] = Object.keys(data);\n\n\t\tfor (var i: number = 0; i < keys.length; i++)\n\t\t{\n\t\t\tlet k: string = keys[i];\n\t\t\tlet v: any = data[k];\n\t\t\tv = encodeURIComponent(v);\n\t\t\tret += \"&\" + k + \"=\" + v;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * POST参数检查器\n\t */\n\texport var postChecker: dataCheckerType = function (data: any): any\n\t{\n\t\tif (typeof (data) !== \"object\") return \"\";\n\n\t\tvar arr: any[] = new Array();\n\t\tvar i: number = 0;\n\t\tfor (var attr in data)\n\t\t{\n\t\t\tarr[i] = attr + \"=\" + encodeURIComponent(data[attr]);\n\t\t\ti++;\n\t\t}\n\n\t\treturn arr.join(\"&\");\n\t}\n\n\t/** 发起GET请求 */\n\texport function get(\n\t\turi: string,\n\t\tdata: any,\n\t\tcallbackTarget: any,\n\t\tsuccessHandler: Function,\n\t\tfailHandler: Function): void\n\t{\n\t\tif (!HttpUtils.URL.isUrl(uri))\n\t\t{\n\t\t\turi = FWSEnv.API_BASE_URL + uri;\n\t\t}\n\n\t\tvar request: XMLHttpRequest = new XMLHttpRequest();\n\t\tvar url: string = uriChecker ? uriChecker(uri, data) : uri;\n\t\trequest.open(\"GET\", url);\n\t\trequest.timeout = GET_OVERTIME;\n\t\trequest.setRequestHeader(\"content-type\", \"text/plain;charset=UTF-8\");\n\t\trequest.onerror = request.ontimeout = function (): void\n\t\t{\n\t\t\tif (request.readyState !== 4)\n\t\t\t{\n\t\t\t\tif (failHandler) failHandler.call(callbackTarget, request);\n\t\t\t}\n\t\t};\n\t\trequest.onreadystatechange = function (): void\n\t\t{\n\t\t\tif (request.readyState === 4)\n\t\t\t{\n\t\t\t\tif ((request.status >= 200 && request.status < 300) || request.status == 304)\n\t\t\t\t{\n\t\t\t\t\tif (successHandler) successHandler.call(callbackTarget, request);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (failHandler) failHandler.call(callbackTarget, request);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\trequest.send();\n\n\t}\n\n\t/** 发起POST请求 */\n\texport function post(\n\t\turi: string,\n\t\tgetData: any,\n\t\tpostData: any,\n\t\tcallbackTarget: any,\n\t\tsuccessHandler: Function,\n\t\tfailHandler: Function): void\n\t{\n\t\tif (!HttpUtils.URL.isUrl(uri)) \n\t\t{\n\t\t\turi = FWSEnv.API_BASE_URL + uri;\n\t\t}\n\n\t\tvar request: XMLHttpRequest = new XMLHttpRequest();\n\t\tvar url: string = uriChecker ? uriChecker(uri, getData) : uri;\n\t\trequest.open(\"POST\", url, true);\n\t\trequest.timeout = POST_OVERTIME;\n\t\trequest.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n\t\trequest.onerror = request.ontimeout = function ()\n\t\t{\n\t\t\tif (request.readyState !== 4)\n\t\t\t{\n\t\t\t\tif (failHandler) failHandler.call(callbackTarget, request);\n\t\t\t}\n\t\t}\n\t\trequest.onreadystatechange = function ()\n\t\t{\n\t\t\tif (request.readyState == 4)\n\t\t\t{\n\t\t\t\tif ((request.status >= 200 && request.status < 300) || request.status == 304)\n\t\t\t\t{\n\t\t\t\t\tif (successHandler) successHandler.call(callbackTarget, request);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (failHandler) failHandler.call(callbackTarget, request);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (postChecker) postData = postChecker(postData);\n\t\trequest.send(postData);\n\t}\n}\n\nexport = WebClient;\n\n// const GLOBAL_YY = window[\"GLOBAL_YY\"] || {};\n// GLOBAL_YY.YYWebClient = YYWebClient;","/*\n * 调试功能\n * @Author: 刘强 \n * @Date: 2018-07-31 15:40:50 \n * @Last Modified by: 刘强\n * @Last Modified time: 2018-07-31 16:16:01\n */\n\nimport FWSEnv = require('../FWSEnv');\n\n\nmodule X\n{\n\t/** 控制台颜色值 */\n\texport type ConsoleColor = \"red\" | \"green\" | \"blue\" | \"orange\" | \"violet\";\n\n\t/** 获取任意内容的文本信息 */\n\tfunction getString(args: any[]): string\n\t{\n\t\tvar ret: string = \"\";\n\t\tvar ary: string[] = [];\n\t\tif (args !== null && args !== undefined)\n\t\t{\n\t\t\tfor (var i: number = 0; i < args.length; i++)\n\t\t\t{\n\t\t\t\tvar a: any = args[i];\n\t\t\t\tif (a === null) ary.push(\"NULL\");\n\t\t\t\telse if(a === undefined) ary.push(\"UNDEFINED\");\n\t\t\t\telse ary.push(a.toString());\n\t\t\t}\n\t\t}\n\t\tret = ary.join(\" \");\n\t\treturn ret;\n\t}\n\n\t/** 执行控制台指令 */\n\tfunction executeConsole(api:string, args:any[]):void\n\t{\n\t\tvar handler:Function = console[api];\n\t\tif(!handler) return;\n\n\t\tif(FWSEnv.DEBUG_ADVANCED)\n\t\t{\n\t\t\thandler.apply(null, args);\n\t\t}\n\t\telse\n\t\t{\n\t\t\thandler.call(null, getString(args));\n\t\t}\n\t}\n\n\t/**\n\t * 输出普通日志\n\t * @param args 内容\n\t */\n\texport function log(...args: any[]): void\n\t{\n\t\tif (!FWSEnv.DEBUG) return;\n\n\t\texecuteConsole(\"log\", args);\n\t}\n\n\t/**\n\t * 输出信息日志\n\t * @param args 内容\n\t */\n\texport function info(...args: any[]): void\n\t{\n\t\tif (!FWSEnv.DEBUG) return;\n\n\t\texecuteConsole(\"info\", args);\n\t}\n\n\t/**\n\t * 输出警告日志\n\t * @param args 内容\n\t */\n\texport function warn(...args: any[]): void\n\t{\n\t\tif (!FWSEnv.DEBUG) return;\n\n\t\texecuteConsole(\"warn\", args);\n\t}\n\n\t/**\n\t * 输出借误日志\n\t * @param args 内容\n\t */\n\texport function error(...args: any[]): void\n\t{\n\t\tif (!FWSEnv.DEBUG) return;\n\n\t\texecuteConsole(\"error\", args);\n\t}\n\n\t/**\n\t * 按照指定的颜色输出日志\n\t * @param color {ConsoleColor} 按照\n\t * @param args 任意内容\n\t */\n\texport function color(color: ConsoleColor, ...args: any[]): void\n\t{\n\t\tif (!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tvar msg:string = getString(args);\n\t\tconsole.log(\"%c\" + msg, \"color:\"+ color);\n\t}\n\n\t/** 开始一段可展开和收起的日志项(展开状态) */\n\texport function group(...args:any[]):void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tconsole.group.apply(null, args);\n\t\t\n\t}\n\n\t/** 开始一段可展开和收起的日志项(收起状态) */\n\texport function groupCollapsed(...args:any[]):void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\t\tconsole.groupCollapsed.apply(null, args);\n\t}\n\n\t/** 结束一段可展开和收起的日志项 */\n\texport function groupEnd():void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tconsole.groupEnd();\n\t}\n\n\t/** 表格形式输出数据 */\n\texport function table(...args:any[]):void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tconsole.table.apply(null, args);\n\t}\n\n\t/** 计时开始 */\n\texport function time(...args:any[]):void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tconsole.time();\n\t}\n\n\t/** 计时结束 */\n\texport function timeEnd(...args:any[]):void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tconsole.timeEnd();\n\t}\n\n\t/** 输出堆栈调用 */\n\texport function trace(...args:any[]):void\n\t{\n\t\tif(!FWSEnv.DEBUG_ADVANCED) return;\n\n\t\tconsole.trace.apply(null, args);\n\t}\n}\nexport = X;\n\nwindow[\"X\"] = X;"],"sourceRoot":"/source/","file":"project.js"}